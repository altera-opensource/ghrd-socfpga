//****************************************************************************
//
// SPDX-License-Identifier: MIT-0
// Copyright(c) 2017-2021 Intel Corporation.
//
//****************************************************************************
// This is a generated system top level RTL file. 

@@if {$hps_emif_ecc_en == 1} {
@@   incr hps_emif_width 8
@@   set hps_ddr_w $hps_emif_width
@@   set hps_ddr_dm_w [expr $hps_emif_width/8]
@@   set hps_ddr_dqs_w [expr $hps_emif_width/8]
@@} else {
@@   set hps_ddr_w $hps_emif_width
@@   set hps_ddr_dm_w [expr $hps_emif_width/8]
@@   set hps_ddr_dqs_w [expr $hps_emif_width/8]
@@}

@@if {$fpga_emif_ecc_en == 1} {
@@   incr fpga_emif_width 8
@@   set fpga_ddr_w $fpga_emif_width
@@   set fpga_ddr_dm_w [expr $fpga_emif_width/8]
@@   set fpga_ddr_dqs_w [expr $fpga_emif_width/8]
@@} else {
@@   set fpga_ddr_w $fpga_emif_width
@@   set fpga_ddr_dm_w [expr $fpga_emif_width/8]
@@   set fpga_ddr_dqs_w [expr $fpga_emif_width/8]
@@}

module ${top_name} (
// Clock and Reset
@@if {$board == "devkit" || $board == "atso12" || $board == "ashfield" || $board == "klamath"} {
@@if {$h2f_user_clk_en == 0} {
input  wire [1-1:0]  fpga_clk_100,
@@}
input  wire [1-1:0]  fpga_reset_n,
output wire [4-1:0]  fpga_led_pio,
input  wire [4-1:0]  fpga_dipsw_pio,
input  wire [4-1:0]  fpga_button_pio,
@@}
@@if {$fpga_pcie == 1} {
input  wire                pcie_hip_refclk_clk,
input  wire [$pcie_count-1:0]          pcie_hip_serial_rx_in,
output wire [$pcie_count-1:0]          pcie_hip_serial_tx_out,
input  wire                pcie_hip_npor_pin_perst,
output wire                mux_io_1v8_20,       //fpga_pcie_perstn
@@}
//HPS
@@if {$hps_en == 1} {
@@if {$hps_emif_en == 1} {
// HPS EMIF
@@if {$board == "devkit"} {
@@if {$hps_emif_type == "ddr3"} {
output wire [0:0]    emif_hps_mem_mem_ck,
output wire [0:0]    emif_hps_mem_mem_ck_n,
output wire [14:0]   emif_hps_mem_mem_a,
output wire [2:0]    emif_hps_mem_mem_ba,
output wire [0:0]    emif_hps_mem_mem_cke,
output wire [0:0]    emif_hps_mem_mem_cs_n,
output wire [0:0]    emif_hps_mem_mem_odt,
output wire [0:0]    emif_hps_mem_mem_reset_n,
output wire [0:0]    emif_hps_mem_mem_we_n,
output wire [0:0]    emif_hps_mem_mem_ras_n,
output wire [0:0]    emif_hps_mem_mem_cas_n,
input  wire          emif_hps_oct_oct_rzqin,
input  wire          emif_hps_pll_ref_clk,
output wire [$hps_ddr_dm_w-1:0]  emif_hps_mem_mem_dm,
inout  wire [$hps_ddr_w-1:0] emif_hps_mem_mem_dq,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs_n,
@@}
@@if {$hps_emif_type == "ddr4"} {
@@#devkit uses the DDR4 HiLo based on x16 components. By JEDEC spec, DDR4 x16 components doesn't requires emif_hps_mem_mem_bg[1]
output wire [0:0]    emif_hps_mem_mem_ck,
output wire [0:0]    emif_hps_mem_mem_ck_n,
output wire [16:0]   emif_hps_mem_mem_a,
output wire [0:0]    emif_hps_mem_mem_act_n,
output wire [1:0]    emif_hps_mem_mem_ba,
output wire [0:0]    emif_hps_mem_mem_bg,
output wire [0:0]    emif_hps_mem_mem_cke,
output wire [0:0]    emif_hps_mem_mem_cs_n,
output wire [0:0]    emif_hps_mem_mem_odt,
output wire [0:0]    emif_hps_mem_mem_reset_n,
output wire [0:0]    emif_hps_mem_mem_par,
input  wire [0:0]    emif_hps_mem_mem_alert_n,
input  wire          emif_hps_oct_oct_rzqin,
input  wire          emif_hps_pll_ref_clk,
inout  wire [$hps_ddr_dm_w-1:0]  emif_hps_mem_mem_dbi_n,
inout  wire [$hps_ddr_w-1:0] emif_hps_mem_mem_dq,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs_n,
@@}
@@} elseif {$board == "pe"} {
@@#PE1760 board uses a DIMM based on x8 components, which requires emif_hps_mem_mem_bg[1]
output wire [0:0]    emif_hps_mem_mem_ck,
output wire [0:0]    emif_hps_mem_mem_ck_n,
output wire [0:0]    emif_hps_mem_mem_act_n,
output wire [16:0]   emif_hps_mem_mem_a,
output wire [1:0]    emif_hps_mem_mem_ba,
output wire [1:0]    emif_hps_mem_mem_bg,
output wire [0:0]    emif_hps_mem_mem_cke,
output wire [0:0]    emif_hps_mem_mem_cs_n,
output wire [0:0]    emif_hps_mem_mem_odt,
output wire [0:0]    emif_hps_mem_mem_reset_n,
output wire [0:0]    emif_hps_mem_mem_par,
input  wire [0:0]    emif_hps_mem_mem_alert_n,
input  wire          emif_hps_oct_oct_rzqin,
input  wire          emif_hps_pll_ref_clk,
inout  wire [$hps_ddr_dm_w-1:0]  emif_hps_mem_mem_dbi_n,
inout  wire [$hps_ddr_w-1:0] emif_hps_mem_mem_dq,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs_n,
@@} elseif {$board == "atso12" || $board == "ashfield"} {
@@#atso12 uses the DDR4 HiLo based on x16 components. By JEDEC spec, DDR4 x16 components doesn't requires emif_hps_mem_mem_bg[1]
output wire [0:0]    emif_hps_mem_mem_ck,
output wire [0:0]    emif_hps_mem_mem_ck_n,
output wire [16:0]   emif_hps_mem_mem_a,
output wire [0:0]    emif_hps_mem_mem_act_n,
output wire [1:0]    emif_hps_mem_mem_ba,
output wire [0:0]    emif_hps_mem_mem_bg,
output wire [0:0]    emif_hps_mem_mem_cke,
output wire [0:0]    emif_hps_mem_mem_cs_n,
output wire [0:0]    emif_hps_mem_mem_odt,
output wire [0:0]    emif_hps_mem_mem_reset_n,
output wire [0:0]    emif_hps_mem_mem_par,
input  wire [0:0]    emif_hps_mem_mem_alert_n,
input  wire          emif_hps_oct_oct_rzqin,
input  wire          emif_hps_pll_ref_clk,
inout  wire [$hps_ddr_dm_w-1:0]  emif_hps_mem_mem_dbi_n,
inout  wire [$hps_ddr_w-1:0] emif_hps_mem_mem_dq,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs_n,
@@} elseif {$board == "klamath"} {
@@#klamath ridge uses 3 DDR4 512Mb x16 components. By JEDEC spec, DDR4 x16 components doesn't requires emif_hps_mem_mem_bg[1]
output wire [0:0]    emif_hps_mem_mem_ck,
output wire [0:0]    emif_hps_mem_mem_ck_n,
output wire [16:0]   emif_hps_mem_mem_a,
output wire [0:0]    emif_hps_mem_mem_act_n,
output wire [1:0]    emif_hps_mem_mem_ba,
output wire [0:0]    emif_hps_mem_mem_bg,
output wire [0:0]    emif_hps_mem_mem_cke,
output wire [0:0]    emif_hps_mem_mem_cs_n,
output wire [0:0]    emif_hps_mem_mem_odt,
output wire [0:0]    emif_hps_mem_mem_reset_n,
output wire [0:0]    emif_hps_mem_mem_par,
input  wire [0:0]    emif_hps_mem_mem_alert_n,
input  wire          emif_hps_oct_oct_rzqin,
input  wire          emif_hps_pll_ref_clk,
inout  wire [$hps_ddr_dm_w-1:0]  emif_hps_mem_mem_dbi_n,
inout  wire [$hps_ddr_w-1:0] emif_hps_mem_mem_dq,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs,
inout  wire [$hps_ddr_dqs_w-1:0]  emif_hps_mem_mem_dqs_n,
@@}
@@}
@@if {$daughter_card == "devkit_dc4" || $daughter_card == "devkit_dc2" || $daughter_card == "devkit_dc_oobe"} {
input  wire          hps_jtag_tck,
input  wire          hps_jtag_tms,
output wire          hps_jtag_tdo,
input  wire          hps_jtag_tdi,
@@}
@@if {$hps_sdmmc4b_q1_en == 1 || $hps_sdmmc8b_q1_en == 1 || $hps_sdmmc4b_q4_en == 1 || $hps_sdmmc8b_q4_en == 1} {
output wire          hps_sdmmc_CCLK, 
inout  wire          hps_sdmmc_CMD,          
inout  wire          hps_sdmmc_D0,          
inout  wire          hps_sdmmc_D1,          
inout  wire          hps_sdmmc_D2,        
inout  wire          hps_sdmmc_D3,        
@@}
@@if {$hps_sdmmc8b_q1_en == 1 || $hps_sdmmc8b_q4_en == 1} {
inout  wire          hps_sdmmc_D4,          
inout  wire          hps_sdmmc_D5,          
inout  wire          hps_sdmmc_D6,        
inout  wire          hps_sdmmc_D7,  
@@}
@@if {$hps_usb0_en == 1} {
inout  wire          hps_usb0_DATA0,         
inout  wire          hps_usb0_DATA1,      
inout  wire          hps_usb0_DATA2,        
inout  wire          hps_usb0_DATA3,       
inout  wire          hps_usb0_DATA4,        
inout  wire          hps_usb0_DATA5,      
inout  wire          hps_usb0_DATA6,      
inout  wire          hps_usb0_DATA7,         
input  wire          hps_usb0_CLK,         
output wire          hps_usb0_STP,       
input  wire          hps_usb0_DIR,        
input  wire          hps_usb0_NXT, 
@@}
@@if {$hps_usb1_en == 1} {
inout  wire          hps_usb1_DATA0,         
inout  wire          hps_usb1_DATA1,      
inout  wire          hps_usb1_DATA2,        
inout  wire          hps_usb1_DATA3,       
inout  wire          hps_usb1_DATA4,        
inout  wire          hps_usb1_DATA5,      
inout  wire          hps_usb1_DATA6,      
inout  wire          hps_usb1_DATA7,         
input  wire          hps_usb1_CLK,         
output wire          hps_usb1_STP,       
input  wire          hps_usb1_DIR,        
input  wire          hps_usb1_NXT, 
@@}
@@if {$hps_emac0_rmii_en == 1 || $hps_emac0_rgmii_en == 1} {
output wire          hps_emac0_TX_CLK,       //TODO: may need to change RMII TX CLK to be input instead, check
input  wire          hps_emac0_RX_CLK,      
output wire          hps_emac0_TX_CTL,
input  wire          hps_emac0_RX_CTL,      
output wire          hps_emac0_TXD0,       
output wire          hps_emac0_TXD1,
input  wire          hps_emac0_RXD0,     
input  wire          hps_emac0_RXD1,                
@@}
@@if {$hps_emac0_rgmii_en == 1} {
output wire          hps_emac0_TXD2,        
output wire          hps_emac0_TXD3,
input  wire          hps_emac0_RXD2,        
input  wire          hps_emac0_RXD3, 
@@}
@@if {$hps_mdio0_q1_en == 1 || $hps_mdio0_q3_en == 1 || $hps_mdio0_q4_en == 1} {
inout  wire          hps_emac0_MDIO,         
output wire          hps_emac0_MDC,
@@}
@@if {$hps_emac1_rmii_en == 1 || $hps_emac1_rgmii_en == 1} {
output wire          hps_emac1_TX_CLK,       
input  wire          hps_emac1_RX_CLK,      
output wire          hps_emac1_TX_CTL,
input  wire          hps_emac1_RX_CTL,      
output wire          hps_emac1_TXD0,       
output wire          hps_emac1_TXD1,
input  wire          hps_emac1_RXD0,     
input  wire          hps_emac1_RXD1,   
@@}
@@if {$hps_emac1_rgmii_en == 1} {
output wire          hps_emac1_TXD2,        
output wire          hps_emac1_TXD3,
input  wire          hps_emac1_RXD2,        
input  wire          hps_emac1_RXD3,
@@}
@@if {$hps_mdio1_q1_en == 1 || $hps_mdio1_q4_en == 1} {
inout  wire          hps_emac1_MDIO,         
output wire          hps_emac1_MDC,
@@}
@@if {$hps_emac2_rmii_en == 1 || $hps_emac2_rgmii_en == 1} {
output wire          hps_emac2_TX_CLK,       
input  wire          hps_emac2_RX_CLK,      
output wire          hps_emac2_TX_CTL,
input  wire          hps_emac2_RX_CTL,      
output wire          hps_emac2_TXD0,       
output wire          hps_emac2_TXD1,
input  wire          hps_emac2_RXD0,     
input  wire          hps_emac2_RXD1, 
@@}
@@if {$hps_emac2_rgmii_en == 1} {
output wire          hps_emac2_TXD2,        
output wire          hps_emac2_TXD3,
input  wire          hps_emac2_RXD2,        
input  wire          hps_emac2_RXD3,
@@}
@@if {$hps_mdio2_q1_en == 1 || $hps_mdio2_q3_en == 1} {
inout  wire          hps_emac2_MDIO,         
output wire          hps_emac2_MDC,
@@}
@@if {$hps_spim0_q1_en == 1 || $hps_spim0_q4_en == 1} {
output wire          hps_spim0_CLK,
output wire          hps_spim0_MOSI,
input  wire          hps_spim0_MISO,
output wire          hps_spim0_SS0_N,
@@}
@@if {$hps_spim0_2ss_en == 1} {
output wire          hps_spim0_SS1_N,
@@}
@@if {$hps_spim1_q1_en == 1 || $hps_spim1_q2_en == 1 || $hps_spim1_q3_en == 1} {
output wire          hps_spim1_CLK,
output wire          hps_spim1_MOSI,
input  wire          hps_spim1_MISO,
output wire          hps_spim1_SS0_N,
@@}
@@if {$hps_spim1_2ss_en == 1} {
output wire          hps_spim1_SS1_N,
@@}
@@if {$hps_spis0_q1_en == 1 || $hps_spis0_q2_en == 1 || $hps_spis0_q3_en == 1} {
input  wire          hps_spis0_CLK,
input  wire          hps_spis0_MOSI,
output wire          hps_spis0_MISO,
input  wire          hps_spis0_SS0_N,
@@}
@@if {$hps_spis1_q1_en == 1 || $hps_spis1_q3_en == 1 || $hps_spis1_q4_en == 1} {
input  wire          hps_spis1_CLK,
input  wire          hps_spis1_MOSI,
output wire          hps_spis1_MISO,
input  wire          hps_spis1_SS0_N,
@@}
@@if {$hps_uart0_q1_en == 1 || $hps_uart0_q2_en == 1 || $hps_uart0_q3_en == 1} {
input  wire          hps_uart0_RX,       
output wire          hps_uart0_TX, 
@@}
@@if {$hps_uart0_fc_en == 1} {
input  wire          hps_uart0_CTS_N,       
output wire          hps_uart0_RTS_N, 
@@}
@@if {$hps_uart1_q1_en == 1 || $hps_uart1_q3_en == 1 || $hps_uart1_q4_en == 1} {
input  wire          hps_uart1_RX,       
output wire          hps_uart1_TX, 
@@}
@@if {$hps_uart1_fc_en == 1} {
input  wire          hps_uart1_CTS_N,       
output wire          hps_uart1_RTS_N, 
@@}
@@if {$hps_i2c0_q1_en == 1 || $hps_i2c0_q2_en == 1 || $hps_i2c0_q3_en == 1} {
inout  wire          hps_i2c0_SDA,        
inout  wire          hps_i2c0_SCL, 
@@}
@@if {$hps_i2c1_q1_en == 1 || $hps_i2c1_q2_en == 1 || $hps_i2c1_q3_en == 1 || $hps_i2c1_q4_en == 1} {
inout  wire          hps_i2c1_SDA,        
inout  wire          hps_i2c1_SCL, 
@@}
@@if {$hps_i2c_emac0_q1_en == 1 || $hps_i2c_emac0_q3_en == 1 || $hps_i2c_emac0_q4_en == 1} {
inout  wire          hps_i2c_emac0_SDA,        
inout  wire          hps_i2c_emac0_SCL,  
@@}
@@if {$hps_i2c_emac1_q1_en == 1 || $hps_i2c_emac1_q4_en == 1} {
inout  wire          hps_i2c_emac1_SDA,        
inout  wire          hps_i2c_emac1_SCL,  
@@}
@@if {$hps_i2c_emac2_q1_en == 1 || $hps_i2c_emac2_q3_en == 1 || $hps_i2c_emac2_q4_en == 1} {
inout  wire          hps_i2c_emac2_SDA,        
inout  wire          hps_i2c_emac2_SCL,  
@@}
@@if {$hps_nand_q12_en == 1 || $hps_nand_q34_en == 1} {
output wire          hps_nand_ALE,
output wire          hps_nand_CE_N,
output wire          hps_nand_CLE,
output wire          hps_nand_RE_N,
input  wire          hps_nand_RB,
output wire          hps_nand_WP_N,
output wire          hps_nand_WE_N,
inout  wire          hps_nand_ADQ0,
inout  wire          hps_nand_ADQ1,
inout  wire          hps_nand_ADQ2,
inout  wire          hps_nand_ADQ3,
inout  wire          hps_nand_ADQ4,
inout  wire          hps_nand_ADQ5,
inout  wire          hps_nand_ADQ6,
inout  wire          hps_nand_ADQ7,
@@}
@@if {$hps_nand_16b_en == 1} {
inout  wire          hps_nand_ADQ8,
inout  wire          hps_nand_ADQ9,
inout  wire          hps_nand_ADQ10,
inout  wire          hps_nand_ADQ11,
inout  wire          hps_nand_ADQ12,
inout  wire          hps_nand_ADQ13,
inout  wire          hps_nand_ADQ14,
inout  wire          hps_nand_ADQ15,
@@}
@@if {$hps_trace_q12_en == 1 || $hps_trace_q34_en == 1} {
output wire          hps_trace_CLK, 
output wire          hps_trace_D0, 
output wire          hps_trace_D1, 
output wire          hps_trace_D2, 
output wire          hps_trace_D3,
@@}
@@if {$hps_trace_8b_en == 1 || $hps_trace_12b_en ==1 || $hps_trace_16b_en ==1} {
output wire          hps_trace_D4,
output wire          hps_trace_D5, 
output wire          hps_trace_D6, 
output wire          hps_trace_D7, 
@@}
@@if {$hps_trace_12b_en == 1 || $hps_trace_16b_en ==1} {
output wire          hps_trace_D8,
output wire          hps_trace_D9, 
output wire          hps_trace_D10, 
output wire          hps_trace_D11, 
@@}
@@if {$hps_trace_16b_en == 1} {
output wire          hps_trace_D12,
output wire          hps_trace_D13, 
output wire          hps_trace_D14, 
output wire          hps_trace_D15, 
@@}
@@if {$hps_gpio0_en == 1} {
@@  foreach io_num $hps_gpio0_list {
inout  wire          hps_gpio0_io${io_num},
@@  }
@@}
@@if {$hps_gpio1_en == 1} {
@@  foreach io_num $hps_gpio1_list {
inout  wire          hps_gpio1_io${io_num},
@@  }
@@}
@@if {$hps_pll_out_en == 1} {
output wire          hps_pll0_clk,
output wire          hps_pll1_clk,
output wire          hps_pll2_clk,
output wire          hps_pll3_clk,
@@}
@@if {$ftrace_en == 1} {
output wire [$ftrace_output_width-1:0]   ftrace_data,
output wire          ftrace_clk,
@@}
@@if {$fpga_i2c_en == 1} {
inout  wire          fpga_i2c_sda,
inout  wire          fpga_i2c_scl,
@@}
@@if {$hps_mge_en == 1 || $hps_mge_10gbe_1588_en == 1} {
input  wire          enet_refclk,
@@}
@@if {$hps_mge_en == 1} {
@@ for {set x 1} {$x<=$sgmii_count} {incr x} {
input  wire          emac${x}_sgmii_rxp,       
output wire          emac${x}_sgmii_txp,       
inout  wire          emac${x}_mdio,
output wire          emac${x}_mdc,
input  wire          emac${x}_phy_irq,
output wire          emac${x}_phy_rst_n,
@@}
@@}
@@if {$hps_mge_10gbe_1588_en == 1} {
input  wire          mge_refclk_125m,
input  wire          mge_refclk_10g,

input  wire [$hps_mge_10gbe_1588_count-1:0]    mge_10gbe_rxp,       
output wire [$hps_mge_10gbe_1588_count-1:0]    mge_10gbe_txp,

@@ for {set x 1} {$x<=$hps_mge_10gbe_1588_count} {incr x} {
@@if { $x == 1} {
@@set y "a"
@@} else {
@@set y "b"
@@}      
output wire          sfp${y}_txdisable,
output wire [1:0]    sfp${y}_ratesel,
input  wire          sfp${y}_los,
input  wire          sfp${y}_txfault,
input  wire          sfp${y}_mod0_prstn,
@@}
inout  wire          sfpa_i2c_scl,
inout  wire          sfpa_i2c_sda,
@@}
@@}
@@if {$niosii_mem == "ddr" || $fpga_emif_en == 1} {
output wire [0:0]    fpga_emif_mem_mem_ck,
output wire [0:0]    fpga_emif_mem_mem_ck_n,
output wire [16:0]   fpga_emif_mem_mem_a,
output wire [0:0]    fpga_emif_mem_mem_act_n,
output wire [1:0]    fpga_emif_mem_mem_ba,
output wire [0:0]    fpga_emif_mem_mem_bg,
output wire [0:0]    fpga_emif_mem_mem_cke,
output wire [0:0]    fpga_emif_mem_mem_cs_n,
output wire [0:0]    fpga_emif_mem_mem_odt,
output wire [0:0]    fpga_emif_mem_mem_reset_n,
output wire [0:0]    fpga_emif_mem_mem_par,
input  wire [0:0]    fpga_emif_mem_mem_alert_n,
inout  wire [$fpga_ddr_dqs_w-1:0]     fpga_emif_mem_mem_dqs,
inout  wire [$fpga_ddr_dqs_w-1:0]     fpga_emif_mem_mem_dqs_n,
inout  wire [$fpga_ddr_w-1:0]         fpga_emif_mem_mem_dq,
inout  wire [$fpga_ddr_dm_w-1:0]      fpga_emif_mem_mem_dbi_n,
output wire [0:0]    fpga_emif_pll_ref_clk_clk,
output wire [0:0]    fpga_emif_oct_oct_rzqin, 
@@}
@@if {$niosii_en == 1} {
input  wire          uart_serial_sin,
output wire          uart_serial_sout
@@}
@@if {$hps_en == 1} {
input  wire          hps_ref_clk
@@}
);

wire         system_clk_100;
wire         system_clk_100_internal;
@@if {$clk_gate_en == 1} {
wire         system_clk_100_gated;
@@}
wire         ninit_done;
wire         fpga_reset_n_debounced_wire;
reg          fpga_reset_n_debounced;
wire         src_reset_n;
wire         system_reset_n;
wire         system_reset_sync;
@@if {$fpga_pcie == 1} {
wire         pcie_npor_npor;
wire [4:0]   pcie_a10_hip_status_ltssmstate;
@@}
@@if {$niosii_mem == "ddr" || $fpga_emif_en == 1} {
wire         emif_usr_reset_n;
wire         fpga_emif_status_local_cal_success;
wire         fpga_emif_status_local_cal_fail;
wire         fpga_emif_local_reset_status_local_reset_done;
wire         fpga_emif_local_reset_req_local_reset_req;
@@}
@@if {$hps_en == 1} {
wire         h2f_reset;
@@  if {$h2f_user_clk_en ==1} {
wire         h2f_user_clk_clk;
@@  }
@@  if {$board == "devkit" || $board == "atso12" || $board == "ashfield" || $board == "klamath"} {
assign system_reset_n = fpga_reset_n_debounced & src_reset_n & ~h2f_reset & ~ninit_done;
@@  } else {
assign system_reset_n = src_reset_n & ~h2f_reset & ~ninit_done;
@@  }
@@} else {
assign system_reset_n = fpga_reset_n_debounced & src_reset_n & ~ninit_done;
@@}

altera_reset_synchronizer #(
    .ASYNC_RESET (1),
    .DEPTH       (2)
) sys_rst_inst (
    .reset_in  (~system_reset_n),
    .clk       (system_clk_100),
    .reset_out (system_reset_sync)
);

@@if {$fpga_i2c_en == 1} {
wire fpga_i2c_scl_oe;
wire fpga_i2c_sda_oe;

assign fpga_i2c_scl = (fpga_i2c_scl_oe == 1'b1) ? 1'b0 : 1'bz;
assign fpga_i2c_sda = (fpga_i2c_sda_oe == 1'b1) ? 1'b0 : 1'bz;
@@}

@@if {$hps_mge_en == 1} {
@@ for {set x 1} {$x<=$sgmii_count} {incr x} {
wire emac${x}_led_panel_link;
wire emac${x}_led_link;
wire emac${x}_led_an;
wire xcvr_reset_${x}_tx_ready;
wire xcvr_reset_${x}_rx_ready;
@@}
@@ set mge_led_pio_width [expr {$sgmii_count*5+2}]
wire [$mge_led_pio_width:0] mge_led_pio;

wire fpll_1G_pll_locked;
wire fpll_1G_mcgb_serial_clk;

wire [3:0]  mge_rcfg_pio;
wire enet_pll_locked;

@@}

@@if {$hps_mge_10gbe_1588_en == 1} { 
wire sfp_i2c_scl_oe;
wire sfp_i2c_sda_oe;

wire                   mge_10gbe_clk_156p25;
wire                   mge_core_pll_locked;
wire                   mge_xcvr_sampling_pll_locked;
wire                   mge_tod_sampling_pll_locked;
wire                   mge_csr_clk;
wire                   mge_reset_csr_clk;
wire [16:0]            mge_csr_address;
wire                   mge_csr_write;
wire                   mge_csr_read;
wire                   mge_csr_waitrequest;
wire [3:0]             mge_csr_byteenable;
wire                   mge_csr_debugaccess;
wire                   mge_csr_burstcount;
wire [31:0]            mge_csr_writedata;
wire [31:0]            mge_csr_readdata;
wire                   mge_csr_readdatavalid;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_tx_valid;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_tx_ready;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_tx_startofpacket;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_tx_endofpacket;
wire [$hps_mge_10gbe_1588_count-1:0][63:0]     mge_avalon_st_tx_data;
wire [$hps_mge_10gbe_1588_count-1:0][ 2:0]     mge_avalon_st_tx_empty;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_tx_error;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_rx_valid;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_rx_ready;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_rx_startofpacket;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_avalon_st_rx_endofpacket;
wire [$hps_mge_10gbe_1588_count-1:0][63:0]     mge_avalon_st_rx_data;
wire [$hps_mge_10gbe_1588_count-1:0][ 2:0]     mge_avalon_st_rx_empty;
wire [$hps_mge_10gbe_1588_count-1:0][ 5:0]     mge_avalon_st_rx_error;
wire [$hps_mge_10gbe_1588_count-1:0][ 1:0]     mge_avalon_st_pause_data;
wire [$hps_mge_10gbe_1588_count-1:0][ 1:0]     mge_xgmii_rx_link_fault_status;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_led_link;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_led_char_err;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_led_disp_err;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_led_an;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_rx_block_lock;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_channel_tx_ready;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_channel_rx_ready;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_tx_egress_timestamp_request_in_valid;
wire [$hps_mge_10gbe_1588_count-1:0][7:0]      mge_tx_egress_timestamp_request_in_fingerprint;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_tx_egress_timestamp_96b_valid;
wire [$hps_mge_10gbe_1588_count-1:0][95:0]     mge_tx_egress_timestamp_96b_data;
wire [$hps_mge_10gbe_1588_count-1:0][7:0]      mge_tx_egress_timestamp_96b_fingerprint;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_rx_ingress_timestamp_96b_valid;
wire [$hps_mge_10gbe_1588_count-1:0][95:0]     mge_rx_ingress_timestamp_96b_data;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_start_tod_sync;
wire [$hps_mge_10gbe_1588_count-1:0]           mge_pulse_per_second;
wire                   mge_master_pulse_per_second;
    
@@if {$hps_mge_10gbe_1588_count == 1} {
wire [2:0]             sfp_control;    
wire [0:0]             mge_10gbe_tod_start_sync_ctrl;    
wire [2:0]             mge_10gbe_status;
wire [9:0]             mge_10gbe_debug_status;
@@} else {
wire [5:0]             sfp_control;    
wire [1:0]             mge_10gbe_tod_start_sync_ctrl;    
wire [6:0]             mge_10gbe_status;
wire [16:0]            mge_10gbe_debug_status;
@@}
wire [$hps_mge_10gbe_1588_count-1:0]           mge_10gbe_mac_link_status;

@@ for {set x 1} {$x<=$hps_mge_10gbe_1588_count} {incr x} {
wire        chan${x}_ready; 
@@}
@@}

@@  if {$h2f_user_clk_en  == 1} {
assign system_clk_100   = h2f_user_clk_clk;
@@  } else {
assign system_clk_100   = fpga_clk_100;
@@  }

@@  if {$clk_gate_en == 1} {
assign system_clk_100_internal  = system_clk_100_gated;
@@  } else {
assign system_clk_100_internal  = system_clk_100;
@@  }

@@  if {$fpga_peripheral_en ==1} {
wire [3:0]     fpga_debounced_buttons;
wire [2:0]     fpga_led_internal;
wire           heartbeat_led;
reg  [22:0]    heartbeat_count;
assign fpga_led_pio = {heartbeat_led,fpga_led_internal};
assign heartbeat_led = ~heartbeat_count[22];
@@  } 

@@if {$hps_en == 1} {
@@  if {$board == "devkit" || $board == "atso12" || $board == "ashfield" || $board == "klamath" || $hps_peri_irq_loopback_en == 1} {
wire [31:0]    f2h_irq1_irq;
@@  }
@@  if {$gpio_loopback_en ==1} {
wire [31:0]    h2f_gp_loopback;
@@  }

@@if {$pr_enable == 1} {
@@  for {set m 0} {$m<$pr_region_count} {incr m} {
wire            pr_handshake_start_req_ack_loopback_wire_${m};
wire            pr_handshake_stop_req_ack_loopback_wire_${m};
@@}
@@if {$freeze_ack_dly_enable == 1} {
@@  for {set m 0} {$m<$pr_region_count} {incr m} {
wire            pr_handshake_start_req_ack_loopback_wire_delay_ver_${m};
wire            pr_handshake_stop_req_ack_loopback_wire_delay_ver_${m};
wire            freeze_wire_${m};
wire            illegal_request_wire_${m};
@@}
wire [31:0]     start_ack_delay_cnt;
wire [31:0]     stop_ack_delay_cnt;
@@}
@@}

@@if {$hps_mge_en == 1} {
@@ for {set x 1} {$x<=$sgmii_count} {incr x} {
wire emac${x}_mdi_i, emac${x}_mdo_oe, emac${x}_mdo_o;
assign emac${x}_mdio  = emac${x}_mdo_oe ? emac${x}_mdo_o : 1'bz;
assign emac${x}_mdi_i = emac${x}_mdio;

assign emac${x}_phy_rst_n = ~system_reset_sync;
@@}

assign mge_led_pio[2:0] = {emac1_led_panel_link, emac1_led_link, emac1_led_an};
assign mge_led_pio[4:3] = {xcvr_reset_1_rx_ready, xcvr_reset_1_tx_ready};
assign mge_led_pio[5] = fpll_1G_pll_locked;
assign mge_led_pio[6] = 1'b0;
assign mge_led_pio[7] = 1'b0;
@@if {$sgmii_count == 2} {
assign mge_led_pio[10:8] = {emac2_led_panel_link, emac2_led_link, emac2_led_an};
assign mge_led_pio[12:11] = {xcvr_reset_2_rx_ready, xcvr_reset_2_tx_ready};
@@}
@@}

@@if {$hps_mge_10gbe_1588_en == 1} {
assign sfpa_txdisable            = sfp_control[0];
assign sfpa_ratesel              = sfp_control[2:1];
assign mge_start_tod_sync[0]     = mge_10gbe_tod_start_sync_ctrl[0];
assign mge_10gbe_status[2:0]       = {sfpa_mod0_prstn, sfpa_txfault, sfpa_los};
assign mge_10gbe_debug_status[9:0] = {mge_tod_sampling_pll_locked, mge_xcvr_sampling_pll_locked, mge_core_pll_locked, mge_rx_block_lock[0], mge_led_an[0], mge_led_disp_err[0], mge_led_char_err[0], mge_led_link[0], mge_xgmii_rx_link_fault_status[0]};
assign mge_10gbe_mac_link_status[0] = chan1_ready;
@@if {$hps_mge_10gbe_1588_count == 2} {
assign sfpb_txdisable            = sfp_control[3];
assign sfpb_ratesel              = sfp_control[5:4];
assign mge_start_tod_sync[1]     = mge_10gbe_tod_start_sync_ctrl[1];
assign mge_10gbe_status[5:3]       = {sfpb_mod0_prstn, sfpb_txfault, sfpb_los};
assign mge_10gbe_debug_status[16:10]  = {mge_rx_block_lock[1], mge_led_an[1], mge_led_disp_err[1], mge_led_char_err[1], mge_led_link[1], mge_xgmii_rx_link_fault_status[1]};
assign mge_10gbe_mac_link_status[1]   = chan2_ready;
@@}

@@ for {set x 1} {$x<=$hps_mge_10gbe_1588_count} {incr x} {
@@ set x_m1 [expr {$x -1}]                             
assign chan${x}_ready = mge_channel_tx_ready[$x_m1] & mge_channel_rx_ready[$x_m1] & mge_core_pll_locked & mge_xcvr_sampling_pll_locked & mge_tod_sampling_pll_locked;
@@}


assign sfpa_i2c_scl = (sfp_i2c_scl_oe == 1'b1) ? 1'b0 : 1'bz;
assign sfpa_i2c_sda = (sfp_i2c_sda_oe == 1'b1) ? 1'b0 : 1'bz;
@@}

@@if {$hps_stm_en == 1} {
wire [42:0]    stm_hw_events;

@@if {$fpga_peripheral_en == 1 & $cross_trigger_en == 1} {
assign stm_hw_events    = {{30{1'b0}}, heartbeat_led, fpga_led_internal, fpga_dipsw_pio, fpga_debounced_buttons};
@@} else {
assign stm_hw_events    = 43'b0;
@@  }
@@}

@@if {$fpga_pcie == 1} {
wire [31:0] gp_output;
wire [31:0] gp_input;
wire [13:0] pcie_link_status;
wire [5:0] pcie_pipe_sim_ltssmstate;	//qis warning: actual bit length 1 differs from formal bit length 6

assign gp_input = 32'h0;		//qis warning: does not have a driver
@@}

@@if {$board == "devkit" || $board == "atso12" || $board == "ashfield" || $board == "klamath" || $hps_peri_irq_loopback_en == 1} {
@@if {$hps_mge_en == 0} {
assign f2h_irq1_irq    = {32'b0};
@@} else {
@@if {$sgmii_count == 1} {
assign f2h_irq1_irq    = {31'b0, ~emac1_phy_irq};
@@} else {
assign f2h_irq1_irq    = {30'b0, ~emac2_phy_irq, ~emac1_phy_irq};
@@}
@@}
@@}
@@}

@@if {$fpga_pcie == 1} {
assign pcie_npor_npor = pcie_hip_npor_pin_perst;

assign mux_io_1v8_20 = ~gp_output[1];
@@}

// Qsys Top module
${qsys_name} soc_inst (
.src_prb_rst_sources_source             (src_reset_n),
.reset_reset_n                          (~system_reset_sync), 
@@if {$board == "pe" || ($h2f_user_clk_en == 1 && $hps_en == 1)} {
.h2f_user_clk_clk                       (h2f_user_clk_clk), 
@@}
.clk_100_clk                            (system_clk_100_internal),
.ninit_done_ninit_done                  (ninit_done),
@@if {$clk_gate_en == 1} {
.clkctrl_input_ena                      (~ninit_done),
.clkctrl_input_inclk                    (system_clk_100),
.clkctrl_output_outclk                  (system_clk_100_gated),
@@}
@@if {$fpga_peripheral_en == 1} {
.led_pio_external_connection_in_port    (fpga_led_internal),                    
.led_pio_external_connection_out_port   (fpga_led_internal),
.dipsw_pio_external_connection_export   (fpga_dipsw_pio), 
.button_pio_external_connection_export  (fpga_debounced_buttons), 
@@}
@@if {$fpga_pcie == 1} {  
.pcie_hip_refclk_clk                    (pcie_hip_refclk_clk),
.pcie_hip_pipe_sim_pipe_pclk_in         (1'b0),
@@  for {set j 0} {$j<$pcie_count} {incr j} {
.pcie_hip_pipe_phystatus${j}            (1'b0),
.pcie_hip_pipe_rxdata${j}               (32'b0),
.pcie_hip_pipe_rxdatak${j}              (4'b0),
.pcie_hip_pipe_rxelecidle${j}           (1'b0),
.pcie_hip_pipe_rxstatus${j}             (3'b0),
.pcie_hip_pipe_rxvalid${j}              (1'b0),
.pcie_hip_pipe_rxdataskip${j}           (1'b0),
.pcie_hip_pipe_rxblkst${j}              (1'b0),
.pcie_hip_pipe_rxsynchd${j}             (2'b0),
.pcie_hip_serial_rx_in${j}              (pcie_hip_serial_rx_in[${j}]),
.pcie_hip_serial_tx_out${j}             (pcie_hip_serial_tx_out[${j}]),
@@}
.pcie_hip_pipe_sim_ltssmstate           (pcie_pipe_sim_ltssmstate),
.pcie_hip_status_ltssmstate             (pcie_link_status[5:0]),
.pcie_hip_status_link_up                (pcie_link_status[6]),
.pcie_hip_status_lane_act               (pcie_link_status[11:7]),
.pcie_hip_currentspeed_currentspeed     (pcie_link_status[13:12]),
.pcie_hip_npor_npor                     (pcie_npor_npor),
.pcie_hip_npor_pin_perst                (pcie_hip_npor_pin_perst),
.pcie_link_stat_pio_export              (pcie_link_status),
@@}
@@if {$hps_en == 1} {     
@@if {$hps_stm_en == 1} {
.s10_hps_f2h_stm_hw_events_stm_hwevents (stm_hw_events),     
@@}
@@if {$hps_emif_en == 1} {
@@if {$board == "devkit"} {
@@if {$hps_emif_type == "ddr3"} {
.emif_hps_pll_ref_clk_clk               (emif_hps_pll_ref_clk),   
.emif_hps_mem_mem_ck                    (emif_hps_mem_mem_ck),   
.emif_hps_mem_mem_ck_n                  (emif_hps_mem_mem_ck_n),  
.emif_hps_mem_mem_a                     (emif_hps_mem_mem_a),       
.emif_hps_mem_mem_ba                    (emif_hps_mem_mem_ba),      
.emif_hps_mem_mem_cke                   (emif_hps_mem_mem_cke),    
.emif_hps_mem_mem_cs_n                  (emif_hps_mem_mem_cs_n),    
.emif_hps_mem_mem_odt                   (emif_hps_mem_mem_odt),     
.emif_hps_mem_mem_reset_n               (emif_hps_mem_mem_reset_n),
.emif_hps_mem_mem_we_n                  (emif_hps_mem_mem_we_n),
.emif_hps_mem_mem_ras_n                 (emif_hps_mem_mem_ras_n),
.emif_hps_mem_mem_cas_n                 (emif_hps_mem_mem_cas_n),
.emif_hps_mem_mem_dqs                   (emif_hps_mem_mem_dqs),       
.emif_hps_mem_mem_dqs_n                 (emif_hps_mem_mem_dqs_n),     
.emif_hps_mem_mem_dq                    (emif_hps_mem_mem_dq), 
.emif_hps_mem_mem_dm                    (emif_hps_mem_mem_dm), 
.emif_hps_oct_oct_rzqin                 (emif_hps_oct_oct_rzqin), 
@@}
@@if {$hps_emif_type == "ddr4"} {
.emif_hps_pll_ref_clk_clk               (emif_hps_pll_ref_clk),   
.emif_hps_mem_mem_ck                    (emif_hps_mem_mem_ck),   
.emif_hps_mem_mem_ck_n                  (emif_hps_mem_mem_ck_n),  
.emif_hps_mem_mem_a                     (emif_hps_mem_mem_a),       
.emif_hps_mem_mem_act_n                 (emif_hps_mem_mem_act_n),   
.emif_hps_mem_mem_ba                    (emif_hps_mem_mem_ba),      
.emif_hps_mem_mem_bg                    (emif_hps_mem_mem_bg),      
.emif_hps_mem_mem_cke                   (emif_hps_mem_mem_cke),    
.emif_hps_mem_mem_cs_n                  (emif_hps_mem_mem_cs_n),    
.emif_hps_mem_mem_odt                   (emif_hps_mem_mem_odt),     
.emif_hps_mem_mem_reset_n               (emif_hps_mem_mem_reset_n),
.emif_hps_mem_mem_par                   (emif_hps_mem_mem_par),          
.emif_hps_mem_mem_alert_n               (emif_hps_mem_mem_alert_n),    
.emif_hps_mem_mem_dqs                   (emif_hps_mem_mem_dqs),       
.emif_hps_mem_mem_dqs_n                 (emif_hps_mem_mem_dqs_n),     
.emif_hps_mem_mem_dq                    (emif_hps_mem_mem_dq), 
.emif_hps_mem_mem_dbi_n                 (emif_hps_mem_mem_dbi_n), 
.emif_hps_oct_oct_rzqin                 (emif_hps_oct_oct_rzqin), 
@@}
@@} else {
@@#PE1760
@@#ATSO12
@@#Ashfield
.emif_hps_pll_ref_clk_clk               (emif_hps_pll_ref_clk),   
.emif_hps_mem_mem_ck                    (emif_hps_mem_mem_ck),   
.emif_hps_mem_mem_ck_n                  (emif_hps_mem_mem_ck_n),  
.emif_hps_mem_mem_a                     (emif_hps_mem_mem_a),       
.emif_hps_mem_mem_act_n                 (emif_hps_mem_mem_act_n),   
.emif_hps_mem_mem_ba                    (emif_hps_mem_mem_ba),      
.emif_hps_mem_mem_bg                    (emif_hps_mem_mem_bg),      
.emif_hps_mem_mem_cke                   (emif_hps_mem_mem_cke),    
.emif_hps_mem_mem_cs_n                  (emif_hps_mem_mem_cs_n),    
.emif_hps_mem_mem_odt                   (emif_hps_mem_mem_odt),     
.emif_hps_mem_mem_reset_n               (emif_hps_mem_mem_reset_n),
.emif_hps_mem_mem_par                   (emif_hps_mem_mem_par),          
.emif_hps_mem_mem_alert_n               (emif_hps_mem_mem_alert_n),    
.emif_hps_mem_mem_dqs                   (emif_hps_mem_mem_dqs),       
.emif_hps_mem_mem_dqs_n                 (emif_hps_mem_mem_dqs_n),     
.emif_hps_mem_mem_dq                    (emif_hps_mem_mem_dq), 
.emif_hps_mem_mem_dbi_n                 (emif_hps_mem_mem_dbi_n), 
.emif_hps_oct_oct_rzqin                 (emif_hps_oct_oct_rzqin), 
@@}
@@}
@@if {$daughter_card == "devkit_dc4" || $daughter_card == "devkit_dc2" || $daughter_card == "devkit_dc_oobe"} {
.hps_io_hps_io_jtag_tck                 (hps_jtag_tck),                
.hps_io_hps_io_jtag_tms                 (hps_jtag_tms),                
.hps_io_hps_io_jtag_tdo                 (hps_jtag_tdo),                 
.hps_io_hps_io_jtag_tdi                 (hps_jtag_tdi),    
@@}
@@if {$hps_emac0_rmii_en == 1 || $hps_emac0_rgmii_en == 1} {
.hps_io_hps_io_phery_emac0_TX_CLK       (hps_emac0_TX_CLK),     
.hps_io_hps_io_phery_emac0_RX_CLK       (hps_emac0_RX_CLK),     
.hps_io_hps_io_phery_emac0_TX_CTL       (hps_emac0_TX_CTL),    
.hps_io_hps_io_phery_emac0_RX_CTL       (hps_emac0_RX_CTL),    
.hps_io_hps_io_phery_emac0_TXD0         (hps_emac0_TXD0),     
.hps_io_hps_io_phery_emac0_TXD1         (hps_emac0_TXD1),
.hps_io_hps_io_phery_emac0_RXD0         (hps_emac0_RXD0),       
.hps_io_hps_io_phery_emac0_RXD1         (hps_emac0_RXD1),        
@@}
@@if {$hps_emac0_rgmii_en == 1} {
.hps_io_hps_io_phery_emac0_TXD2         (hps_emac0_TXD2),      
.hps_io_hps_io_phery_emac0_TXD3         (hps_emac0_TXD3),   
.hps_io_hps_io_phery_emac0_RXD2         (hps_emac0_RXD2),        
.hps_io_hps_io_phery_emac0_RXD3         (hps_emac0_RXD3),
@@}
@@if {$hps_mdio0_q1_en == 1 || $hps_mdio0_q3_en == 1 || $hps_mdio0_q4_en == 1} {
.hps_io_hps_io_phery_emac0_MDIO         (hps_emac0_MDIO),       
.hps_io_hps_io_phery_emac0_MDC          (hps_emac0_MDC), 
@@}
@@if {$hps_emac1_rmii_en == 1 || $hps_emac1_rgmii_en == 1} {
.hps_io_hps_io_phery_emac1_TX_CLK       (hps_emac1_TX_CLK),     
.hps_io_hps_io_phery_emac1_RX_CLK       (hps_emac1_RX_CLK),     
.hps_io_hps_io_phery_emac1_TX_CTL       (hps_emac1_TX_CTL),    
.hps_io_hps_io_phery_emac1_RX_CTL       (hps_emac1_RX_CTL),    
.hps_io_hps_io_phery_emac1_TXD0         (hps_emac1_TXD0),     
.hps_io_hps_io_phery_emac1_TXD1         (hps_emac1_TXD1),
.hps_io_hps_io_phery_emac1_RXD0         (hps_emac1_RXD0),       
.hps_io_hps_io_phery_emac1_RXD1         (hps_emac1_RXD1),        
@@}
@@if {$hps_emac1_rgmii_en == 1} {    
.hps_io_hps_io_phery_emac1_TXD2         (hps_emac1_TXD2),      
.hps_io_hps_io_phery_emac1_TXD3         (hps_emac1_TXD3),   
.hps_io_hps_io_phery_emac1_RXD2         (hps_emac1_RXD2),        
.hps_io_hps_io_phery_emac1_RXD3         (hps_emac1_RXD3),
@@}
@@if {$hps_mdio1_q1_en == 1 || $hps_mdio1_q4_en == 1} {
.hps_io_hps_io_phery_emac1_MDIO         (hps_emac1_MDIO),       
.hps_io_hps_io_phery_emac1_MDC          (hps_emac1_MDC), 
@@}
@@if {$hps_emac2_rmii_en == 1 || $hps_emac2_rgmii_en == 1} {
.hps_io_hps_io_phery_emac2_TX_CLK       (hps_emac2_TX_CLK),      
.hps_io_hps_io_phery_emac2_RX_CLK       (hps_emac2_RX_CLK),  
.hps_io_hps_io_phery_emac2_TX_CTL       (hps_emac2_TX_CTL),     
.hps_io_hps_io_phery_emac2_RX_CTL       (hps_emac2_RX_CTL),  
.hps_io_hps_io_phery_emac2_TXD0         (hps_emac2_TXD0),        
.hps_io_hps_io_phery_emac2_TXD1         (hps_emac2_TXD1),  
.hps_io_hps_io_phery_emac2_RXD0         (hps_emac2_RXD0),   
.hps_io_hps_io_phery_emac2_RXD1         (hps_emac2_RXD1),     
@@}
@@if {$hps_emac2_rgmii_en == 1} {
.hps_io_hps_io_phery_emac2_TXD2         (hps_emac2_TXD2),      
.hps_io_hps_io_phery_emac2_TXD3         (hps_emac2_TXD3),  
.hps_io_hps_io_phery_emac2_RXD2         (hps_emac2_RXD2),     
.hps_io_hps_io_phery_emac2_RXD3         (hps_emac2_RXD3),   
@@}
@@if {$hps_mdio2_q1_en == 1 || $hps_mdio2_q3_en == 1} {
.hps_io_hps_io_phery_emac2_MDIO         (hps_emac2_MDIO),  
.hps_io_hps_io_phery_emac2_MDC          (hps_emac2_MDC),  
@@}
@@if {$hps_sdmmc4b_q1_en == 1 || $hps_sdmmc8b_q1_en == 1 || $hps_sdmmc4b_q4_en == 1 || $hps_sdmmc8b_q4_en == 1} {
.hps_io_hps_io_phery_sdmmc_CCLK         (hps_sdmmc_CCLK),   
.hps_io_hps_io_phery_sdmmc_CMD          (hps_sdmmc_CMD), 
.hps_io_hps_io_phery_sdmmc_D0           (hps_sdmmc_D0),          
.hps_io_hps_io_phery_sdmmc_D1           (hps_sdmmc_D1),          
.hps_io_hps_io_phery_sdmmc_D2           (hps_sdmmc_D2),         
.hps_io_hps_io_phery_sdmmc_D3           (hps_sdmmc_D3),        
@@}
@@if {$hps_sdmmc8b_q1_en == 1 || $hps_sdmmc8b_q4_en == 1} {
.hps_io_hps_io_phery_sdmmc_D4           (hps_sdmmc_D4),          
.hps_io_hps_io_phery_sdmmc_D5           (hps_sdmmc_D5),          
.hps_io_hps_io_phery_sdmmc_D6           (hps_sdmmc_D6),         
.hps_io_hps_io_phery_sdmmc_D7           (hps_sdmmc_D7),
@@}
@@if {$hps_nand_q12_en == 1 || $hps_nand_q34_en == 1} {
.hps_io_hps_io_phery_nand_ALE           (hps_nand_ALE),
.hps_io_hps_io_phery_nand_CE_N          (hps_nand_CE_N),
.hps_io_hps_io_phery_nand_CLE           (hps_nand_CLE),
.hps_io_hps_io_phery_nand_RE_N          (hps_nand_RE_N),
.hps_io_hps_io_phery_nand_RB            (hps_nand_RB),
.hps_io_hps_io_phery_nand_WP_N          (hps_nand_WP_N),
.hps_io_hps_io_phery_nand_WE_N          (hps_nand_WE_N),
.hps_io_hps_io_phery_nand_ADQ0          (hps_nand_ADQ0),
.hps_io_hps_io_phery_nand_ADQ1          (hps_nand_ADQ1),
.hps_io_hps_io_phery_nand_ADQ2          (hps_nand_ADQ2),
.hps_io_hps_io_phery_nand_ADQ3          (hps_nand_ADQ3),
.hps_io_hps_io_phery_nand_ADQ4          (hps_nand_ADQ4),
.hps_io_hps_io_phery_nand_ADQ5          (hps_nand_ADQ5),
.hps_io_hps_io_phery_nand_ADQ6          (hps_nand_ADQ6),
.hps_io_hps_io_phery_nand_ADQ7          (hps_nand_ADQ7),
@@}
@@if {$hps_nand_16b_en == 1} {
.hps_io_hps_io_phery_nand_ADQ8          (hps_nand_ADQ8),
.hps_io_hps_io_phery_nand_ADQ9          (hps_nand_ADQ9),
.hps_io_hps_io_phery_nand_ADQ10         (hps_nand_ADQ10),
.hps_io_hps_io_phery_nand_ADQ11         (hps_nand_ADQ11),
.hps_io_hps_io_phery_nand_ADQ12         (hps_nand_ADQ12),
.hps_io_hps_io_phery_nand_ADQ13         (hps_nand_ADQ13),
.hps_io_hps_io_phery_nand_ADQ14         (hps_nand_ADQ14),
.hps_io_hps_io_phery_nand_ADQ15         (hps_nand_ADQ15),
@@}
@@if {$hps_i2c0_q1_en == 1 || $hps_i2c0_q2_en == 1 || $hps_i2c0_q3_en == 1} {
.hps_io_hps_io_phery_i2c0_SDA           (hps_i2c0_SDA),     
.hps_io_hps_io_phery_i2c0_SCL           (hps_i2c0_SCL),
@@}
@@if {$hps_i2c1_q1_en == 1 || $hps_i2c1_q2_en == 1 || $hps_i2c1_q3_en == 1 || $hps_i2c1_q4_en == 1} {
.hps_io_hps_io_phery_i2c1_SDA           (hps_i2c1_SDA),     
.hps_io_hps_io_phery_i2c1_SCL           (hps_i2c1_SCL),
@@}
@@if {$hps_i2c_emac0_q1_en == 1 || $hps_i2c_emac0_q3_en == 1 || $hps_i2c_emac0_q4_en == 1} {
.hps_io_hps_io_phery_i2cemac0_SDA       (hps_i2c_emac0_SDA),       
.hps_io_hps_io_phery_i2cemac0_SCL       (hps_i2c_emac0_SCL),                  
@@}
@@if {$hps_i2c_emac1_q1_en == 1 || $hps_i2c_emac1_q4_en == 1} {
.hps_io_hps_io_phery_i2cemac1_SDA       (hps_i2c_emac1_SDA),       
.hps_io_hps_io_phery_i2cemac1_SCL       (hps_i2c_emac1_SCL),                  
@@}
@@if {$hps_i2c_emac2_q1_en == 1 || $hps_i2c_emac2_q3_en == 1 || $hps_i2c_emac2_q4_en == 1} {
.hps_io_hps_io_phery_i2cemac2_SDA       (hps_i2c_emac2_SDA),       
.hps_io_hps_io_phery_i2cemac2_SCL       (hps_i2c_emac2_SCL),                  
@@}
@@if {$hps_uart0_q1_en == 1 || $hps_uart0_q2_en == 1 || $hps_uart0_q3_en == 1} {
.hps_io_hps_io_phery_uart0_RX           (hps_uart0_RX),          
.hps_io_hps_io_phery_uart0_TX           (hps_uart0_TX), 
@@}                                 
@@if {$hps_uart0_fc_en == 1} {      
.hps_io_hps_io_phery_uart0_CTS_N        (hps_uart0_CTS_N),  
.hps_io_hps_io_phery_uart0_RTS_N        (hps_uart0_RTS_N),  
@@}
@@if {$hps_uart1_q1_en == 1 || $hps_uart1_q3_en == 1 || $hps_uart1_q4_en == 1} {
.hps_io_hps_io_phery_uart1_RX           (hps_uart1_RX),          
.hps_io_hps_io_phery_uart1_TX           (hps_uart1_TX), 
@@}
@@if {$hps_uart1_fc_en == 1} {
.hps_io_hps_io_phery_uart1_CTS_N        (hps_uart1_CTS_N),  
.hps_io_hps_io_phery_uart1_RTS_N        (hps_uart1_RTS_N),  
@@}
@@if {$hps_spim0_q1_en == 1 || $hps_spim0_q4_en == 1 } {
.hps_io_hps_io_phery_spim0_CLK          (hps_spim0_CLK),
.hps_io_hps_io_phery_spim0_MOSI         (hps_spim0_MOSI),
.hps_io_hps_io_phery_spim0_MISO         (hps_spim0_MISO), 
.hps_io_hps_io_phery_spim0_SS0_N        (hps_spim0_SS0_N),
@@}
@@if {$hps_spim0_2ss_en == 1} {
.hps_io_hps_io_phery_spim0_SS1_N        (hps_spim0_SS1_N),
@@}
@@if {$hps_spim1_q1_en == 1 || $hps_spim1_q2_en == 1 || $hps_spim1_q3_en == 1} {
.hps_io_hps_io_phery_spim1_CLK          (hps_spim1_CLK),
.hps_io_hps_io_phery_spim1_MOSI         (hps_spim1_MOSI),
.hps_io_hps_io_phery_spim1_MISO         (hps_spim1_MISO), 
.hps_io_hps_io_phery_spim1_SS0_N        (hps_spim1_SS0_N),
@@}
@@if {$hps_spim1_2ss_en == 1} {
.hps_io_hps_io_phery_spim1_SS1_N        (hps_spim1_SS1_N),
@@}
@@if {$hps_spis0_q1_en == 1 || $hps_spis0_q2_en == 1 || $hps_spis0_q3_en == 1} {
.hps_io_hps_io_phery_spis0_CLK          (hps_spis0_CLK),
.hps_io_hps_io_phery_spis0_MOSI         (hps_spis0_MOSI),
.hps_io_hps_io_phery_spis0_MISO         (hps_spis0_MISO),
.hps_io_hps_io_phery_spis0_SS0_N        (hps_spis0_SS0_N),
@@}
@@if {$hps_spis1_q1_en == 1 || $hps_spis1_q3_en == 1 || $hps_spis1_q4_en == 1} {
.hps_io_hps_io_phery_spis1_CLK          (hps_spis1_CLK),
.hps_io_hps_io_phery_spis1_MOSI         (hps_spis1_MOSI),
.hps_io_hps_io_phery_spis1_MISO         (hps_spis1_MISO),
.hps_io_hps_io_phery_spis1_SS0_N        (hps_spis1_SS0_N),
@@}                                  
@@if {$hps_usb0_en == 1} {           
.hps_io_hps_io_phery_usb0_CLK           (hps_usb0_CLK), 
.hps_io_hps_io_phery_usb0_STP           (hps_usb0_STP), 
.hps_io_hps_io_phery_usb0_DIR           (hps_usb0_DIR),
.hps_io_hps_io_phery_usb0_NXT           (hps_usb0_NXT),
.hps_io_hps_io_phery_usb0_DATA0         (hps_usb0_DATA0),
.hps_io_hps_io_phery_usb0_DATA1         (hps_usb0_DATA1), 
.hps_io_hps_io_phery_usb0_DATA2         (hps_usb0_DATA2), 
.hps_io_hps_io_phery_usb0_DATA3         (hps_usb0_DATA3), 
.hps_io_hps_io_phery_usb0_DATA4         (hps_usb0_DATA4), 
.hps_io_hps_io_phery_usb0_DATA5         (hps_usb0_DATA5),
.hps_io_hps_io_phery_usb0_DATA6         (hps_usb0_DATA6), 
.hps_io_hps_io_phery_usb0_DATA7         (hps_usb0_DATA7),
@@}
@@if {$hps_usb1_en == 1} {
.hps_io_hps_io_phery_usb1_CLK           (hps_usb1_CLK), 
.hps_io_hps_io_phery_usb1_STP           (hps_usb1_STP), 
.hps_io_hps_io_phery_usb1_DIR           (hps_usb1_DIR),
.hps_io_hps_io_phery_usb1_NXT           (hps_usb1_NXT),
.hps_io_hps_io_phery_usb1_DATA0         (hps_usb1_DATA0),
.hps_io_hps_io_phery_usb1_DATA1         (hps_usb1_DATA1), 
.hps_io_hps_io_phery_usb1_DATA2         (hps_usb1_DATA2), 
.hps_io_hps_io_phery_usb1_DATA3         (hps_usb1_DATA3), 
.hps_io_hps_io_phery_usb1_DATA4         (hps_usb1_DATA4), 
.hps_io_hps_io_phery_usb1_DATA5         (hps_usb1_DATA5),
.hps_io_hps_io_phery_usb1_DATA6         (hps_usb1_DATA6), 
.hps_io_hps_io_phery_usb1_DATA7         (hps_usb1_DATA7),
@@}
@@if {$hps_trace_q12_en == 1 || $hps_trace_q34_en == 1} {
.hps_io_hps_io_phery_trace_CLK          (hps_trace_CLK),  
.hps_io_hps_io_phery_trace_D0           (hps_trace_D0),  
.hps_io_hps_io_phery_trace_D1           (hps_trace_D1),  
.hps_io_hps_io_phery_trace_D2           (hps_trace_D2),  
.hps_io_hps_io_phery_trace_D3           (hps_trace_D3),  
@@}
@@if {$hps_trace_8b_en == 1 || $hps_trace_12b_en ==1 || $hps_trace_16b_en ==1} {
.hps_io_hps_io_phery_trace_D4           (hps_trace_D4),  
.hps_io_hps_io_phery_trace_D5           (hps_trace_D5),  
.hps_io_hps_io_phery_trace_D6           (hps_trace_D6),  
.hps_io_hps_io_phery_trace_D7           (hps_trace_D7),  
@@}
@@if {$hps_trace_12b_en ==1 || $hps_trace_16b_en ==1} {
.hps_io_hps_io_phery_trace_D8           (hps_trace_D8),  
.hps_io_hps_io_phery_trace_D9           (hps_trace_D9),  
.hps_io_hps_io_phery_trace_D10          (hps_trace_D10),  
.hps_io_hps_io_phery_trace_D11          (hps_trace_D11), 
@@}
@@if {$hps_trace_16b_en ==1} {
.hps_io_hps_io_phery_trace_D12          (hps_trace_D12),  
.hps_io_hps_io_phery_trace_D13          (hps_trace_D13),  
.hps_io_hps_io_phery_trace_D14          (hps_trace_D14),  
.hps_io_hps_io_phery_trace_D15          (hps_trace_D15), 
@@}
@@if {$hps_gpio0_en == 1} {
@@  foreach io_num $hps_gpio0_list {
.hps_io_hps_io_gpio_gpio0_io${io_num}           (hps_gpio0_io${io_num}),
@@  }
@@}
@@if {$hps_gpio1_en == 1} {
@@  foreach io_num $hps_gpio1_list {
@@# TODO: temporary name gpio1 to gpio0 to give way for compilation while case:458398 fix
.hps_io_hps_io_gpio_gpio1_io${io_num}           (hps_gpio1_io${io_num}),
@@  }
@@}
@@if {$gpio_loopback_en ==1} {
.s10_hps_h2f_gp_gp_in                   (h2f_gp_loopback),
.s10_hps_h2f_gp_gp_out                  (h2f_gp_loopback),
@@} elseif {$fpga_pcie == 1} {
.s10_hps_h2f_gp_gp_in                   (gp_input),
.s10_hps_h2f_gp_gp_out                  (gp_output),
@@}
@@if {$hps_pll_out_en == 1} {
.hps_io_hps_io_cm_pll0                  (hps_pll0_clk),
.hps_io_hps_io_cm_pll1                  (hps_pll1_clk),
.hps_io_hps_io_cm_pll2                  (hps_pll2_clk),
.hps_io_hps_io_cm_pll3                  (hps_pll3_clk),
@@}
@@if {$board == "devkit" || $board == "atso12" || $board == "ashfield" || $board == "klamath" || $hps_peri_irq_loopback_en == 1} {
.f2h_irq1_irq                           (f2h_irq1_irq),
@@}
@@if {$ftrace_en == 1} {
.ext_trace_f2h_clk_in_clk_ctl           (1'b1),     // use HPS internal debug trace clock to drive TRACE interface
.ext_trace_f2h_clk_in_clk               (1'b0),
.ext_trace_trace_clk_out_clk            (ftrace_clk),
.ext_trace_trace_data_out_export        (ftrace_data),
@@}
@@if {$fpga_i2c_en == 1} {
.fpga_i2c_scl_in_clk                    (fpga_i2c_scl),
.fpga_i2c_clk_clk                       (fpga_i2c_scl_oe),
.fpga_i2c_sda_i                         (fpga_i2c_sda),
.fpga_i2c_sda_oe                        (fpga_i2c_sda_oe),
@@}
@@if {$hps_mge_en == 1} {
.enet_refclk_clk                           (enet_refclk),
.mge_rcfg_reset_sink_reset_n               (fpll_1G_pll_locked),
.mge_led_pio_export                        (mge_led_pio),
.mge_rcfg_pio_export                       (mge_rcfg_pio),
.mge_rcfg_status_export                    (mge_rcfg_pio),
.enet_iopll_locked_export                  (enet_pll_locked),
.fpll_1G_mcgb_serial_clk_clk               (fpll_1G_mcgb_serial_clk),
.fpll_1G_pll_locked_pll_locked             (fpll_1G_pll_locked),
@@ for {set x 1} {$x<=$sgmii_count} {incr x} {
.emac${x}_led_an_export                    (emac${x}_led_an),
.emac${x}_led_char_err_export              (),
.emac${x}_led_disp_err_export              (),
.emac${x}_led_link_export                  (emac${x}_led_link),
.emac${x}_led_panel_link_export            (emac${x}_led_panel_link),
.emac${x}_mdc_clk                          (emac${x}_mdc),
.emac${x}_mdio_gmii_mdi_i                  (emac${x}_mdi_i),
.emac${x}_mdio_gmii_mdo_o                  (emac${x}_mdo_o),
.emac${x}_mdio_gmii_mdo_o_e                (emac${x}_mdo_oe),
.emac${x}_mge_tx_serial_clk_clk            ({fpll_1G_mcgb_serial_clk,1'b0}),            //   input,   width = 2,        emac1_mge_tx_serial_clk.clk
.emac${x}_ptp_ptp_aux_ts_trig_i            (1'b0),
.emac${x}_ptp_ptp_pps_o                    (),
.emac${x}_ptp_ptp_tstmp_data               (),
.emac${x}_ptp_ptp_tstmp_en                 (),
.emac${x}_rx_serial_data_rx_serial_data    (emac${x}_sgmii_rxp),
.emac${x}_tx_serial_data_tx_serial_data    (emac${x}_sgmii_txp),
.gmii_adapter${x}_pll_locked_export        (enet_pll_locked),
.xcvr_reset_${x}_pll_locked_pll_locked     ({fpll_1G_pll_locked, 1'b0}),
.xcvr_reset_${x}_tx_ready_tx_ready         (xcvr_reset_${x}_tx_ready),
.xcvr_reset_${x}_rx_ready_rx_ready         (xcvr_reset_${x}_rx_ready),
@@}
@@}

@@if {$hps_mge_10gbe_1588_en == 1} {
.mge_10gbe_clk_156p25_clk                  (mge_10gbe_clk_156p25),
.sfp_control_pio_in_port                   (sfp_control),
.sfp_control_pio_out_port                  (sfp_control),
.mge_10gbe_status_pio_export               (mge_10gbe_status),
.mge_10gbe_debug_status_pio_export         (mge_10gbe_debug_status),
.mge_10gbe_mac_link_status_pio_export      (mge_10gbe_mac_link_status),
.mge_10gbe_tod_start_sync_ctrl_pio_in_port   (mge_10gbe_tod_start_sync_ctrl),
.mge_10gbe_tod_start_sync_ctrl_pio_out_port  (mge_10gbe_tod_start_sync_ctrl),
.sfp_i2c_scl_in_clk                        (sfpa_i2c_scl),
.sfp_i2c_clk_clk                           (sfp_i2c_scl_oe),
.sfp_i2c_sda_i                             (sfpa_i2c_sda),
.sfp_i2c_sda_oe                            (sfp_i2c_sda_oe),
.mge_refclk_csr_clk                        (enet_refclk),
.mge_refclk_csr_out_clk                    (mge_csr_clk),
.mge_reset_csr_out_reset                   (mge_reset_csr_clk),
.mge_csr_waitrequest                       (mge_csr_waitrequest),
.mge_csr_readdata                          (mge_csr_readdata),
.mge_csr_readdatavalid                     (mge_csr_readdatavalid),
.mge_csr_burstcount                        (mge_csr_burstcount),
.mge_csr_writedata                         (mge_csr_writedata),
.mge_csr_address                           (mge_csr_address),
.mge_csr_write                             (mge_csr_write),
.mge_csr_read                              (mge_csr_read),
.mge_csr_byteenable                        (mge_csr_byteenable),
.mge_csr_debugaccess                       (mge_csr_debugaccess),
@@ for {set x 1} {$x<=$hps_mge_10gbe_1588_count} {incr x} {
@@ set x_m1 [expr {$x -1}]
.mge_rx_dma_ch${x}_pause_control_data         (mge_avalon_st_pause_data[${x_m1}]),
.mge_rx_dma_ch${x}_pktin_data                 (mge_avalon_st_rx_data[${x_m1}]),
.mge_rx_dma_ch${x}_pktin_valid                (mge_avalon_st_rx_valid[${x_m1}]),
.mge_rx_dma_ch${x}_pktin_ready                (mge_avalon_st_rx_ready[${x_m1}]),
.mge_rx_dma_ch${x}_pktin_startofpacket        (mge_avalon_st_rx_startofpacket[${x_m1}]),
.mge_rx_dma_ch${x}_pktin_endofpacket          (mge_avalon_st_rx_endofpacket[${x_m1}]),
.mge_rx_dma_ch${x}_pktin_empty                (mge_avalon_st_rx_empty[${x_m1}]),
.mge_rx_dma_ch${x}_pktin_error                (mge_avalon_st_rx_error[${x_m1}]),
.mge_rx_dma_ch${x}_timestamp_valid            (mge_rx_ingress_timestamp_96b_valid[${x_m1}]),
.mge_rx_dma_ch${x}_timestamp_data             (mge_rx_ingress_timestamp_96b_data[${x_m1}]),
.mge_tx_dma_ch${x}_timestamp_valid            (mge_tx_egress_timestamp_96b_valid[${x_m1}]),
.mge_tx_dma_ch${x}_timestamp_data             (mge_tx_egress_timestamp_96b_data[${x_m1}]),
.mge_tx_dma_ch${x}_timestamp_fingerprint      (mge_tx_egress_timestamp_96b_fingerprint[${x_m1}]),
.mge_tx_dma_ch${x}_pktout_valid               (mge_avalon_st_tx_valid[${x_m1}]),
.mge_tx_dma_ch${x}_pktout_ready               (mge_avalon_st_tx_ready[${x_m1}]),
.mge_tx_dma_ch${x}_pktout_data                (mge_avalon_st_tx_data[${x_m1}]),
.mge_tx_dma_ch${x}_pktout_empty               (mge_avalon_st_tx_empty[${x_m1}]),
.mge_tx_dma_ch${x}_pktout_error               (mge_avalon_st_tx_error[${x_m1}]),
.mge_tx_dma_ch${x}_pktout_endofpacket         (mge_avalon_st_tx_endofpacket[${x_m1}]),
.mge_tx_dma_ch${x}_pktout_startofpacket       (mge_avalon_st_tx_startofpacket[${x_m1}]),
.mge_tx_dma_ch${x}_timestamp_req_valid        (mge_tx_egress_timestamp_request_in_valid[${x_m1}]),
.mge_tx_dma_ch${x}_timestamp_req_fingerprint  (mge_tx_egress_timestamp_request_in_fingerprint[${x_m1}]),
@@}
@@}

@@if {$pr_enable == 1} {
@@if {$freeze_ack_dly_enable == 1} {
.start_ack_pio_external_connection_export  (start_ack_delay_cnt),
.stop_ack_pio_external_connection_export   (stop_ack_delay_cnt), 
@@  for {set m 0} {$m<$pr_region_count} {incr m} {
.frz_ctrl_${m}_pr_handshake_start_req      (pr_handshake_start_req_ack_loopback_wire_${m}),
.frz_ctrl_${m}_pr_handshake_start_ack      (pr_handshake_start_req_ack_loopback_wire_delay_ver_${m}), 
.frz_ctrl_${m}_pr_handshake_stop_req       (pr_handshake_stop_req_ack_loopback_wire_${m}),
.frz_ctrl_${m}_pr_handshake_stop_ack       (pr_handshake_stop_req_ack_loopback_wire_delay_ver_${m}),
.frz_bdg_${m}_freeze_conduit_freeze        (freeze_wire_${m}),           
.frz_bdg_${m}_freeze_conduit_illegal_request    (illegal_request_wire_${m}),  
.frz_ctrl_${m}_bridge_freeze0_freeze            (freeze_wire_${m}),         
.frz_ctrl_${m}_bridge_freeze0_illegal_request   (illegal_request_wire_${m}),  
@@}
@@} else {
@@  for {set m 0} {$m<$pr_region_count} {incr m} {
.frz_ctrl_${m}_pr_handshake_start_req      (pr_handshake_start_req_ack_loopback_wire_${m}),
.frz_ctrl_${m}_pr_handshake_start_ack      (pr_handshake_start_req_ack_loopback_wire_${m}), 
.frz_ctrl_${m}_pr_handshake_stop_req       (pr_handshake_stop_req_ack_loopback_wire_${m}),
.frz_ctrl_${m}_pr_handshake_stop_ack       (pr_handshake_stop_req_ack_loopback_wire_${m}),
@@}
@@}
@@}
.h2f_reset_reset                        (h2f_reset),
.hps_io_hps_io_hps_ocs_clk              (hps_ref_clk)
@@}
@@if {$niosii_mem == "ddr" || ($fpga_emif_en == 1 && $niosii_en == 0)} {
.fpga_emif_local_reset_req_local_reset_req     (1'b0),
.fpga_emif_local_reset_status_local_reset_done (fpga_emif_local_reset_status_local_reset_done),
.fpga_emif_mem_mem_ck                   (fpga_emif_mem_mem_ck),                      
.fpga_emif_mem_mem_ck_n                 (fpga_emif_mem_mem_ck_n),                      
.fpga_emif_mem_mem_a                    (fpga_emif_mem_mem_a),                        
.fpga_emif_mem_mem_act_n                (fpga_emif_mem_mem_act_n),                      
.fpga_emif_mem_mem_ba                   (fpga_emif_mem_mem_ba),                      
.fpga_emif_mem_mem_bg                   (fpga_emif_mem_mem_bg),                         
.fpga_emif_mem_mem_cke                  (fpga_emif_mem_mem_cke),                       
.fpga_emif_mem_mem_cs_n                 (fpga_emif_mem_mem_cs_n),                      
.fpga_emif_mem_mem_odt                  (fpga_emif_mem_mem_odt),                       
.fpga_emif_mem_mem_reset_n              (fpga_emif_mem_mem_reset_n),                     
.fpga_emif_mem_mem_par                  (fpga_emif_mem_mem_par),                         
.fpga_emif_mem_mem_alert_n              (fpga_emif_mem_mem_alert_n),                    
.fpga_emif_mem_mem_dqs                  (fpga_emif_mem_mem_dqs),                       
.fpga_emif_mem_mem_dqs_n                (fpga_emif_mem_mem_dqs_n),                   
.fpga_emif_mem_mem_dq                   (fpga_emif_mem_mem_dq),                  
.fpga_emif_mem_mem_dbi_n                (fpga_emif_mem_mem_dbi_n),                     
.fpga_emif_oct_oct_rzqin                (fpga_emif_oct_oct_rzqin),                     
.fpga_emif_pll_ref_clk_clk              (fpga_emif_pll_ref_clk_clk),                   
.fpga_emif_status_local_cal_success     (fpga_emif_status_local_cal_success),         
.fpga_emif_status_local_cal_fail        (fpga_emif_status_local_cal_fail),          
.emif_usr_reset_n_reset_n               (emif_usr_reset_n),
@@}
@@if {$niosii_en == 1} {
.uart_16550_RS_232_Modem_cts_n          (1'b0),
.uart_16550_RS_232_Modem_rts_n          (),
.uart_16550_RS_232_Modem_dsr_n          (1'b0),
.uart_16550_RS_232_Modem_dcd_n          (1'b0),
.uart_16550_RS_232_Modem_ri_n           (1'b0),
.uart_16550_RS_232_Modem_dtr_n          (),
.uart_16550_RS_232_Modem_out1_n         (),
.uart_16550_RS_232_Modem_out2_n         (),
.uart_16550_RS_232_Serial_sin           (uart_serial_sin),
.uart_16550_RS_232_Serial_sout          (uart_serial_sout),
.uart_16550_RS_232_Serial_sout_oe       ()
@@}
);  

@@if {$hps_mge_10gbe_1588_en == 1} {
alt_mge_rd #(
.NUM_OF_CHANNEL       ($hps_mge_10gbe_1588_count),
.MAX_NUM_OF_CHANNEL   ($hps_mge_10gbe_1588_max_count)
) alt_mge_10gbe_inst (
   // CSR Clock
   .csr_clk                (mge_csr_clk),
   .reset_csr_clk          (mge_reset_csr_clk),
    
   // MAC Clock
   .mac_clk                (),
    
   // XGMII Clock
   .mac64b_clk             (mge_10gbe_clk_156p25),
    
   // Reference Clock
   .refclk_1g2p5g          (mge_refclk_125m),
   .refclk_core            (mge_refclk_125m),
   .refclk_10g             (mge_refclk_10g),
   
   // Reset
   .reset                  (system_reset_sync),
   .tx_digitalreset        (),
   .rx_digitalreset        (),
   .rx_digitalreset_stat   (),
   
   //CSR
   .csr_address            (mge_csr_address      ),
   .csr_write              (mge_csr_write        ),
   .csr_read               (mge_csr_read         ),
   .csr_waitrequest        (mge_csr_waitrequest  ),
   .csr_byteenable         (mge_csr_byteenable   ),
   .csr_debugaccess        (mge_csr_debugaccess  ),
   .csr_burstcount         (mge_csr_burstcount   ),
   .csr_writedata          (mge_csr_writedata    ),
   .csr_readdata           (mge_csr_readdata     ),
   .csr_readdatavalid      (mge_csr_readdatavalid),
   
   
   // MAC TX User Frame
   .avalon_st_tx_valid           (mge_avalon_st_tx_valid        ),
   .avalon_st_tx_ready           (mge_avalon_st_tx_ready        ),
   .avalon_st_tx_startofpacket   (mge_avalon_st_tx_startofpacket),
   .avalon_st_tx_endofpacket     (mge_avalon_st_tx_endofpacket  ),
   .avalon_st_tx_data            (mge_avalon_st_tx_data         ),
   .avalon_st_tx_empty           (mge_avalon_st_tx_empty        ),
   .avalon_st_tx_error           (mge_avalon_st_tx_error        ),
   
   // MAC RX User Frame
   .avalon_st_rx_valid           (mge_avalon_st_rx_valid        ),
   .avalon_st_rx_ready           (mge_avalon_st_rx_ready        ),
   .avalon_st_rx_startofpacket   (mge_avalon_st_rx_startofpacket),
   .avalon_st_rx_endofpacket     (mge_avalon_st_rx_endofpacket  ),
   .avalon_st_rx_data            (mge_avalon_st_rx_data         ),
   .avalon_st_rx_empty           (mge_avalon_st_rx_empty        ),
   .avalon_st_rx_error           (mge_avalon_st_rx_error        ),
   
   // MAC TX Frame Status
   .avalon_st_txstatus_valid     (),
   .avalon_st_txstatus_data      (),
   .avalon_st_txstatus_error     (),
   
   // MAC RX Frame Status
   .avalon_st_rxstatus_valid     (),
   .avalon_st_rxstatus_data      (),
   .avalon_st_rxstatus_error     (),
   
   // MAC TX Pause Frame Generation Command
   .avalon_st_pause_data         (mge_avalon_st_pause_data),
   
   // MAC Status
   .xgmii_rx_link_fault_status   (mge_xgmii_rx_link_fault_status),
   
   // PHY Status
   .led_link                     (mge_led_link     ),
   .led_char_err                 (mge_led_char_err ),
   .led_disp_err                 (mge_led_disp_err ),
   .led_an                       (mge_led_an       ),
   .rx_block_lock                (mge_rx_block_lock),
   
   // Transceiver Serial Interface
   .tx_serial_data               (mge_10gbe_txp),
   .rx_serial_data               (mge_10gbe_rxp),
   .rx_pma_clkout                (),
   
   // Data Path Readiness
   .channel_tx_ready             (mge_channel_tx_ready),
   .channel_rx_ready             (mge_channel_rx_ready),
      
   .xcvr_mode_out                (),
   
   // 1588
   .tx_egress_timestamp_request_in_valid        (mge_tx_egress_timestamp_request_in_valid      ),
   .tx_egress_timestamp_request_in_fingerprint  (mge_tx_egress_timestamp_request_in_fingerprint),
   
   .tx_egress_timestamp_96b_valid               (mge_tx_egress_timestamp_96b_valid      ),
   .tx_egress_timestamp_96b_data                (mge_tx_egress_timestamp_96b_data       ),
   .tx_egress_timestamp_96b_fingerprint         (mge_tx_egress_timestamp_96b_fingerprint),
   
   .rx_ingress_timestamp_96b_valid              (mge_rx_ingress_timestamp_96b_valid),
   .rx_ingress_timestamp_96b_data               (mge_rx_ingress_timestamp_96b_data ),
   
   .start_tod_sync                              (mge_start_tod_sync          ),
   .pulse_per_second                            (mge_pulse_per_second        ),
   .master_pulse_per_second                     (mge_master_pulse_per_second ),
   .core_pll_locked                             (mge_core_pll_locked         ),
   .xcvr_sampling_pll_locked                    (mge_xcvr_sampling_pll_locked),
   .tod_sampling_pll_locked                     (mge_tod_sampling_pll_locked )
);
@@}

// debounce fpga_reset_n
debounce fpga_reset_n_debounce_inst (
.clk          (system_clk_100_internal),
.reset_n      (~ninit_done),
.data_in      (fpga_reset_n),
.data_out     (fpga_reset_n_debounced_wire)
);
defparam fpga_reset_n_debounce_inst.WIDTH = 1;
defparam fpga_reset_n_debounce_inst.POLARITY = "LOW";
defparam fpga_reset_n_debounce_inst.TIMEOUT = 10000;               // at 100Mhz this is a debounce time of 1ms
defparam fpga_reset_n_debounce_inst.TIMEOUT_WIDTH = 32;            // ceil(log2(TIMEOUT))

always @ (posedge system_clk_100_internal or posedge ninit_done)
begin
    if (ninit_done == 1'b1)
        fpga_reset_n_debounced <= 1'b0;
    else
        fpga_reset_n_debounced <= fpga_reset_n_debounced_wire;  
end

@@if {$fpga_peripheral_en == 1} {
// Debounce logic to clean out glitches within 1ms
debounce debounce_inst (
.clk          (system_clk_100_internal),
.reset_n      (~system_reset_sync),  
.data_in      (fpga_button_pio),
.data_out     (fpga_debounced_buttons)
);
defparam debounce_inst.WIDTH = 4;
defparam debounce_inst.POLARITY = "LOW";
defparam debounce_inst.TIMEOUT = 10000;               // at 100Mhz this is a debounce time of 1ms
defparam debounce_inst.TIMEOUT_WIDTH = 32;            // ceil(log2(TIMEOUT))
@@}

@@if {$fpga_peripheral_en ==1} {
always @(posedge system_clk_100_internal or posedge system_reset_sync) begin
  if (system_reset_sync)
    heartbeat_count <= 23'd0;
  else
    heartbeat_count <= heartbeat_count + 23'd1;
end
@@}

@@if {$pr_enable == 1 && $freeze_ack_dly_enable == 1} {
@@  for {set m 0} {$m<$pr_region_count} {incr m} {
ack_delay_logic start_ack_delay_logic_${m}_inst (
.clk                                  (system_clk_100_internal),
.reset                                (hps_fpga_reset), 
.delay_ack_pio                        (start_ack_delay_cnt),  
.ack_in                               (pr_handshake_start_req_ack_loopback_wire_${m}),
.ack_delay_out                        (pr_handshake_start_req_ack_loopback_wire_delay_ver_${m})
);

ack_delay_logic stop_ack_delay_logic_${m}_inst (
.clk                                  (system_clk_100_internal),
.reset                                (hps_fpga_reset), 
.delay_ack_pio                        (stop_ack_delay_cnt),  
.ack_in                               (pr_handshake_stop_req_ack_loopback_wire_${m}),
.ack_delay_out                        (pr_handshake_stop_req_ack_loopback_wire_delay_ver_${m})
); 
@@}
@@}

endmodule
