################################################ # # SPDX-License-Identifier: MIT-0
# Copyright(c) 2019-2020 Intel Corporation.
#
################################################
#
# Makefile to Manage Quartus Prime Pro / QSys Design
#
################################################


################## USER TOPLEVEL CONFIGURATION ##########################
#
# <-
#   BOARD_TYPE:
#       - hidden: hidden type [default]
#
#   BOOTS_FIRST:
#       - hps: hps first [default]
#       - fpga: fpga first
#
#   HPS_JTAG_MODE:
#       - combined: combined mode [default]
#
#   BOARD_REV:
#       - A1: a1 type [default]

#   QUARTUS_DEVICE_FAMILY:
#       - Agilex5: none [default]
#
#   QUARTUS_DEVICE:
#       - A5ED065BB32AE5SR0: none [default]
#
#   BOARD_PWRMGT:
#       - enpirion: none [default]
#
#   ENABLE_HPS_EMIF_ECC:
#       - 0: disable [default]
#
#   HPS_EMIF_REF_CLK_FREQ_MHZ:
#       - 33.333: unit mhz [default]
# ->
#
#########################################################################

SHELL := /bin/bash

.SECONDEXPANSION:
.SUFFIXES: 
.DELETE_ON_ERROR:


#===============================================
# Tools
#===============================================
MAKE             := make
CAT              := cat
CD               := cd
CHMOD            := chmod
CP               := cp -rf
DATE             := date
ECHO             := echo
FIND             := find
GREP             := grep
HEAD             := head
MKDIR            := mkdir -p
MV               := mv
RM               := rm -rf
SED              := sed
TAR              := tar
TOUCH            := touch
WHICH            := which
PWD              := $(shell pwd)

#===============================================
# configuration
#===============================================
MODULES_FILE     := build.module
MODULE_VAR_FILE  := module.var
BUILD_DIR        := build
HELP_TITLE_FILE  := help.title



#===============================================
# Quartus
#===============================================
QUARTUS          :=  quartus
QUARTUS_STP      :=  quartus_stp
QUARTUS_SH       :=  quartus_sh
QUARTUS_PFG      :=  quartus_pfg
QUARTUS_PGM      :=  quartus_pgm
QSYS_GENERATE    :=  qsys-generate
QSYS_SCRIPT      :=  qsys-script


# Helpful Macros
SPACE := $(empty) $(empty)

# Convert upper case string to lower case string
lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

# load user-specific configuration
USER_CONFIG := $(shell sed 's/[[:space:]]//g' build/config)
define LOAD_USER_CONFIG
    $(firstword $(subst =, $(SPACE), $1)) := $(word 2, $(subst =, $(SPACE), $1))
endef
$(foreach p, $(USER_CONFIG), $(eval $(call LOAD_USER_CONFIG, $p)))

# update user-specific configuration
USER_CONFIG_UPDATE := 
define UPDATE_USER_CONFIG
    $(firstword $(subst =, $(SPACE), $1)) := $$($(firstword $(subst =, $(SPACE), $1)))
    USER_CONFIG_UPDATE += $(firstword $(subst =, $(SPACE), $1))=$$($(firstword $(subst =, $(SPACE), $1)))
endef
$(foreach p, $(USER_CONFIG), $(eval $(call UPDATE_USER_CONFIG, $p)))

ifndef COMSPEC
ifdef ComSpec
COMSPEC = $(ComSpec)
endif # ComSpec
endif # COMSPEC

ifdef COMSPEC # if Windows OS
IS_WINDOWS_HOST := 1
endif

ifeq ($(IS_WINDOWS_HOST),1)
ifneq ($(shell $(WHICH) cygwin1.dll 2>/dev/null),)
IS_CYGWIN_HOST := 1
endif
endif

ifneq ($(shell $(WHICH) quartus 2>/dev/null),)
HAVE_QUARTUS := 1
endif

ifneq ($(shell $(WHICH) armclang 2>/dev/null),)
HAVE_C_COMPILER := 1
else ifneq ($(shell $(WHICH) aarch64-none-linux-gnu-gcc 2>/dev/null),)
HAVE_C_COMPILER := 1
else ifneq ($(shell $(WHICH) aarch64-linux-gnu-gcc 2>/dev/null),)
HAVE_C_COMPILER := 1
endif

ifeq ($(HAVE_QUARTUS),1)
HAVE_QSYS := 1
endif

################################################
# Design Settings
#  If you change and design settings, you need
#  to run "make scrub_clean" followed by
#  "make generate_from_tcl" for the settings
#  to be applied
################################################

# Dependency
#INTEL_CUSTOM_IP_TARBALL = "intel_custom_ip_20210323_04233.tar.gz"
#INTEL_CUSTOM_IP_LINK = "https://releases.rocketboards.org/release/intel_custom_ip/$(INTEL_CUSTOM_IP_TARBALL)"

# Family and Device
# QUARTUS_DEVICE to Board Revision Mapping

# User Settings
# Valid BOARD_TYPE: devkit, pcie_devkit
BOARD_TYPE ?= hidden
#Loading board configuration
include board/board_$(BOARD_TYPE)_make_config.inc

# System initilization mode: fpga, hps
BOOTS_FIRST ?= hps

# HPS JTAG MODE: combined, separate
HPS_JTAG_MODE ?= combined

# Board Revision: A0, A1
#BOARD_REV ?= A1

# Option to enable Hard Processor System
HPS_EN ?= 1

# HPS EMIF Enabled: 0, 1
HPS_EMIF_EN ?= 0

# HPS EMIF ECC: 0, 1
ENABLE_HPS_EMIF_ECC ?= 0

# Default Assignment (Do not modify)
QUARTUS_DEVICE_FAMILY := Agilex5
#SM
QUARTUS_DEVICE ?= A5ED065BB32AE5SR0
# Board Power Management. Support board devkit is supported: linear, enpirion
BOARD_PWRMGT ?= enpirion
# Publicly Available DC: devkit_dc_oobe, devkit_dc_nand, devkit_dc_emmc
DAUGHTER_CARD ?= devkit_dc_oobe

# System initilization mode: fpga, hps
BOOTS_FIRST ?= hps
# HPS JTAG MODE: combined, separate
HPS_JTAG_MODE ?= combined
# Option to enable Hard Processor System
HPS_EN ?= 1
F2S_DATA_WIDTH ?= 0
# HPS EMIF Enabled: 0, 1
HPS_EMIF_EN ?= 0
# HPS EMIF ECC is not support for REVA Agilex
ENABLE_HPS_EMIF_ECC ?= 0

ifneq ($(QUARTUS_DEVICE_FAMILY),)
QUARTUS_TCL_ARGS += devicefamily $(QUARTUS_DEVICE_FAMILY)
QSYS_TCL_CMDS += set devicefamily $(QUARTUS_DEVICE_FAMILY);

QUARTUS_TCL_ARGS += project_name ghrd_$(call lc,$(QUARTUS_DEVICE))
QSYS_TCL_CMDS += set project_name ghrd_$(call lc,$(QUARTUS_DEVICE));
endif

ifneq ($(QUARTUS_DEVICE),)
QUARTUS_TCL_ARGS += device $(QUARTUS_DEVICE)
QSYS_TCL_CMDS += set device $(QUARTUS_DEVICE);
endif

ifneq ($(BOARD_TYPE),)
QUARTUS_TCL_ARGS += board $(BOARD_TYPE)
QSYS_TCL_CMDS += set board $(BOARD_TYPE);
endif

ifneq ($(BOARD_PWRMGT),)
QUARTUS_TCL_ARGS += board_pwrmgt $(BOARD_PWRMGT)
QSYS_TCL_CMDS += set board_pwrmgt $(BOARD_PWRMGT);
endif

ifneq ($(BOOTS_FIRST),)
QUARTUS_TCL_ARGS += sys_initialization $(BOOTS_FIRST)
QSYS_TCL_CMDS += set sys_initialization $(BOOTS_FIRST);
endif

ifeq ($(HPS_JTAG_MODE),separate)
QUARTUS_TCL_ARGS += hps_dap_mode 1
endif
ifeq ($(HPS_JTAG_MODE),combined)
QUARTUS_TCL_ARGS += hps_dap_mode 2
endif
ifeq ($(HPS_JTAG_MODE),disabled)
QUARTUS_TCL_ARGS += hps_dap_mode 0
endif

ENABLE_SIGNALTAP_CROSS_TRIGGER := 0
ifeq ($(ENABLE_SIGNALTAP_CROSS_TRIGGER),1)
QUARTUS_TCL_ARGS += cross_trigger_en 1
QSYS_TCL_CMDS += set cross_trigger_en 1;
endif

ifneq ($(DAUGHTER_CARD),)
QUARTUS_TCL_ARGS += daughter_card $(DAUGHTER_CARD)
QSYS_TCL_CMDS += set daughter_card $(DAUGHTER_CARD);
endif

QUARTUS_TCL_ARGS += hps_emif_en $(HPS_EMIF_EN)
QSYS_TCL_CMDS += set hps_emif_en $(HPS_EMIF_EN);
#QUARTUS_TCL_ARGS += hps_emif_ecc_en $(ENABLE_HPS_EMIF_ECC)
#QSYS_TCL_CMDS += set hps_emif_ecc_en $(ENABLE_HPS_EMIF_ECC);

ifneq ($(HPS_EN),)
QUARTUS_TCL_ARGS += hps_en $(HPS_EN) f2s_data_width $(F2S_DATA_WIDTH)
QSYS_TCL_CMDS += set hps_en $(HPS_EN); set f2s_data_width $(F2S_DATA_WIDTH);
endif

ifeq ($(HPS_EMIF_EN),0)
QUARTUS_TCL_ARGS += f2h_width 0
QSYS_TCL_CMDS += set f2h_width 0;
endif

### End of Design Settings ###


# Merge QSYS_TCL_CMDS into a single QSys arg
ifneq ($(QSYS_TCL_CMDS),)
QSYS_TCL_ARGS += --cmd="$(QSYS_TCL_CMDS)"
endif

#===============================================
# Building module control
#===============================================
MODULES := $(shell cat $(MODULES_FILE))
MODULE_BUILD := $(foreach n, $(MODULES), $(n).build)

.PHONY: $(MODULE_BUILD)
$(MODULE_BUILD):
	@$(MAKE) $(USER_CONFIG_UPDATE) -C $(subst .build,,$@) generate_from_tcl

.PHONY: generate_submodule
generate_submodule: $(MODULE_BUILD)


#===============================================
# Config
#===============================================
MODULE_CONFIG := $(foreach n, $(MODULES), $(n).config)


.PHONY: $(MODULE_CONFIG)
$(MODULE_CONFIG) :
	$(MAKE) -C $(subst .config,,$@) config

PROJECT_ROOT          :=  $(PWD)
GHRD_CONFIG_FILE      :=  $(PROJECT_ROOT)/build/config.global
GHRD_HELP_FILE        :=  $(PROJECT_ROOT)/build/help.global
GHRD_SCRIPT_FILE      :=  $(PROJECT_ROOT)/scripts/config_parzer.awk
config: $(MODULE_CONFIG)
	$(shell awk -v config_file=$(GHRD_CONFIG_FILE) -v help_file=$(GHRD_HELP_FILE) -f $(GHRD_SCRIPT_FILE) $(firstword $(MAKEFILE_LIST)))
	@cat $(wildcard build/config.*) > build/config
	@sed -i '/^\s*$$/d' build/config
	@rm -rf build/config.*


################################################
.PHONY: default
default: help
################################################

.PHONY: all
all:

ifeq ($(HAVE_QUARTUS),1)
all: sof
endif

################################################
# Target Stamping

ifeq ($(QUARTUS_ROOTDIR),)
$(warning WARNING: QUARTUS_ROOTDIR not set)
endif

QUARTUS_VERSION = $(if $(wildcard $(QUARTUS_ROOTDIR)/version.txt),$(shell $(CAT) $(QUARTUS_ROOTDIR)/version.txt 2>/dev/null | $(GREP) Version | $(HEAD) -n1 | $(SED) -e 's,^Version[: \t=]*\([0-9.]*\).*,\1,g' 2>/dev/null))

define get_stamp_dir
stamp$(if $(QUARTUS_VERSION),/$(QUARTUS_VERSION))
endef

define get_stamp_target
$(get_stamp_dir)$(if $1,/$1.stamp,$(error ERROR: Arg 1 missing to $0 function))
endef

define stamp_target
@$(MKDIR) $(@D)
@$(TOUCH) $@
endef

.PHONY: clean
clean:
	@$(ECHO) "Cleaning stamp files (which will trigger rebuild)"
	@$(RM) $(get_stamp_dir)
	@$(ECHO) " TIP: Use 'make scrub_clean' to get a deeper clean"
################################################

################################################
# Checking for the existence of intel custom ip
#INTEL_CUSTOM_IP_DIR = intel_custom_ip
#INTEL_CUSTOM_IP_DIR_TARGET = $(INTEL_CUSTOM_IP_DIR)-$(wildcard $(INTEL_CUSTOM_IP_DIR))
#INTEL_CUSTOM_IP_DIR_PRESENT = $(INTEL_CUSTOM_IP_DIR)-$(INTEL_CUSTOM_IP_DIR)
#INTEL_CUSTOM_IP_DIR_ABSENT = $(INTEL_CUSTOM_IP_DIR)-
#
#$(INTEL_CUSTOM_IP_DIR_PRESENT):
#	@echo "Folder $(INTEL_CUSTOM_IP_DIR) exists. Compilation will proceed with local directory"
#
#$(INTEL_CUSTOM_IP_DIR_ABSENT):
#	@echo "Folder $(INTEL_CUSTOM_IP_DIR) does not exist."
#	@echo "Proceed to copy for link $(INTEL_CUSTOM_IP_LINK)"
##if `wget $ -O $(INTEL_CUSTOM_IP_TARBALL) --tries=5 $(INTEL_CUSTOM_IP_LINK)`; then echo "Success"; else echo "Failed" && exit 1; fi
#	if `curl $ -o $(INTEL_CUSTOM_IP_TARBALL) -m 90 -L $(INTEL_CUSTOM_IP_LINK)`; then echo "Success"; else echo "Failed to download $(INTEL_CUSTOM_IP_TARBALL)" && exit 1; fi
#	@echo "$(INTEL_CUSTOM_IP_TARBALL) copied"
##Untar $(INTEL_CUSTOM_IP_TARBALL)
#	tar -xzf $(INTEL_CUSTOM_IP_TARBALL)

################################################

################################################
# Archiving & Cleaning your QuartusII/QSys Project

AR_TIMESTAMP := $(if $(QUARTUS_VERSION),$(subst .,_,$(QUARTUS_VERSION))_)$(subst $(SPACE),,$(shell $(DATE) +%m%d%Y_%k%M%S))

AR_DIR := tgz
AR_FILE := $(AR_DIR)/$(basename $(firstword $(wildcard *.qpf)))_$(AR_TIMESTAMP).tar.gz

SOFTWARE_DIR := software
#custom_ip $(INTEL_CUSTOM_IP_DIR) ip/*/*.ip
AR_REGEX += \
	Makefile *.txt ds5 software custom_ip README.md license.txt \
	altera_avalon* *.sdc *.v *.sv *.vhd *.qsys *.tcl *.terp *.stp *.mk board hps_subsys jtag_subsys peripheral_subsys\
	*.hex *.sed quartus.ini output_files/*.sof output_files/*.rbf output_files/*.pmsf output_files/*handoff* *.sopcinfo */*.sopcinfo *.jdi \
	hps_isw_handoff handoff.bin */*.svd */synthesis/*.svd */synth/*.svd *.dts *.dtb *.xml \
	patches

AR_FILTER_OUT += %_tb.qsys
################################################



################################################
# Build QuartusII/QSys Project
#

#############
# QSys
QSYS_FILE_TOP := qsys_top.qsys
QSYS_FILE_TOP ?= $(firstword $(wildcard *top*.qsys) $(wildcard ghrd*.qsys) $(wildcard *main*.qsys) $(wildcard *soc*.qsys) $(wildcard *.qsys))

OTHER_QSYS_FILES :=

QSYS_FILES += $(QSYS_FILE_TOP) $(OTHER_QSYS_FILES)

ifeq ($(QSYS_FILE_TOP),)
$(error ERROR: QSYS_FILE_TOP *.qsys file not set and could not be discovered)
endif

QSYS_DEPS += $(sort $(QSYS_FILES) $(filter-out pr_%.qsys,$(wildcard *.qsys)))

QSYS_BASE_TOP := $(basename $(QSYS_FILE_TOP))
QSYS_GEN_DIRS := $(foreach qsys_file,$(QSYS_FILES),$(dir $(qsys_file))$(notdir $(basename $(qsys_file))))

QSYS_QIP_FILES := $(foreach qsys_file,$(QSYS_FILES),$(dir $(qsys_file))$(notdir $(basename $(qsys_file)))/$(basename $(notdir $(qsys_file))).qip)

QSYS_SOPCINFO := $(QSYS_BASE_TOP)/$(QSYS_BASE_TOP).sopcinfo
QSYS_STAMP := $(foreach qsys_file,$(QSYS_FILES),$(call get_stamp_target,$(qsys_file).qsys_gen))

# Under cygwin, ensure TMP env variable is not a cygwin style path
# before calling qsys-generate
ifeq ($(IS_CYGWIN_HOST),1)
ifneq ($(shell $(WHICH) cygpath 2>/dev/null),)
SET_QSYS_GENERATE_ENV = TMP="$(shell cygpath -m "$(TMP)")"
endif
endif

.PHONY: qsys_compile
qsys_compile: $(QSYS_STAMP)

ifeq ($(HAVE_QSYS),1)
$(QSYS_SOPCINFO) $(QSYS_QIP_FILES): $(QSYS_STAMP)
	@if [ ! -f "$@" ]; then echo "ERROR: $@ not generated" && false; fi
	$(stamp_target)
endif

QSYS_ARGS += --quartus-project=$(QUARTUS_QPF)
QSYS_ARGS += --rev=$(QUARTUS_BASE_REVISION)
#QSYS_GENERATE_ARGS = $(QSYS_ARGS)
QSYS_GENERATE_ARGS = --quartus-project=$(QUARTUS_QPF)
QSYS_GENERATE_ARGS += --clear-output-directory

$(QSYS_STAMP): $(get_stamp_dir)/%.qsys_gen.stamp: % $(QSYS_DEPS) $(INTEL_CUSTOM_IP_DIR_TARGET)
	$(SET_QSYS_GENERATE_ENV) qsys-generate $(QSYS_GENERATE_ARGS) --rev=$(QUARTUS_BASE_REVISION) $< --upgrade-ip-cores
	$(SET_QSYS_GENERATE_ENV) qsys-script --qpf=none --script=update_sysid.tcl --system-file=$<
	$(SET_QSYS_GENERATE_ENV) qsys-generate $(QSYS_GENERATE_ARGS) --rev=$(QUARTUS_BASE_REVISION) $< --synthesis=VERILOG
	$(stamp_target)

HELP_TARGETS += qsys_edit

qsys_edit.HELP := Launch Platform Designer GUI
ifneq ($(HAVE_QSYS),1)
qsys_edit.HELP := $(qsys_edit.HELP) (Install Quartus Prime Software to enable)
endif

.PHONY: qsys_edit
qsys_edit:
	qsys-edit $(QSYS_ARGS) $(QSYS_FILE_TOP) &

SCRUB_CLEAN_FILES += $(wildcard .qsys_edit)

ifeq ($(HAVE_QSYS),1)
SCRUB_CLEAN_FILES += $(QSYS_QIP_FILES) $(QSYS_SOPCINFO) $(QSYS_GEN_DIRS)
endif

#############
# Quartus Prime

QUARTUS_QPF := ghrd_$(call lc,$(QUARTUS_DEVICE)).qpf

ifeq ($(QUARTUS_QPF),)
$(error ERROR: QUARTUS_QPF *.qpf file not set and could not be discovered)
endif
QUARTUS_BASE := $(basename $(QUARTUS_QPF))
QUARTUS_HDL_SOURCE := $(wildcard *.v *.sv *.vhd)
QUARTUS_MISC_SOURCE := $(wildcard *.stp *.sdc)
QUARTUS_BASE_REVISION := $(QUARTUS_BASE)
QUARTUS_QSF := $(QUARTUS_BASE_REVISION).qsf

AR_REGEX += $(QUARTUS_QPF) $(QUARTUS_QSF)

QUARTUS_DEPS += $(QUARTUS_QSF) $(QUARTUS_HDL_SOURCE) $(QUARTUS_MISC_SOURCE) $(QSYS_STAMP) $(QSYS_QIP_FILES)

QUARTUS_OUTPUT_DIR := output_files
QUARTUS_SOF := $(QUARTUS_OUTPUT_DIR)/$(QUARTUS_BASE).sof
QUARTUS_SOF_WITH_HPS_DEBUG := $(patsubst %.sof,%_hps_debug.sof,$(QUARTUS_SOF))
QUARTUS_RBF := $(patsubst %.sof,%.rbf,$(QUARTUS_SOF_WITH_HPS))
QUARTUS_STAMP := $(call get_stamp_target,quartus)

.PHONY: quartus_compile
quartus_compile: $(QUARTUS_STAMP) $(INTEL_CUSTOM_IP_DIR_TARGET)

ifeq ($(HAVE_QUARTUS),1)
$(QUARTUS_SOF): $(QUARTUS_STAMP)
endif

$(QUARTUS_STAMP): $(QUARTUS_DEPS)
	quartus_stp $(QUARTUS_BASE) -c $(QUARTUS_BASE_REVISION)
	quartus_sh --flow compile $(QUARTUS_QPF) -c $(QUARTUS_BASE_REVISION)
	$(stamp_target)

HELP_TARGETS += quartus_edit
quartus_edit.HELP := Launch Quartus Prime GUI

ifneq ($(HAVE_QUARTUS),1)
quartus_edit.HELP := $(quartus_edit.HELP) (Install Quartus Prime Software to enable)
endif

.PHONY: quartus_edit
quartus_edit:
	quartus $(QUARTUS_QPF) &

HELP_TARGETS += sof
sof.HELP := QSys generate & Quartus compile this design
ifneq ($(HAVE_QUARTUS),1)
sof.HELP := $(sof.HELP) (Install Quartus Prime Software to enable)
endif

BATCH_TARGETS += sof

.PHONY: sof
sof: $(QUARTUS_SOF)

ifeq ($(HAVE_C_COMPILER),1)
sof:  $(QUARTUS_SOF_WITH_HPS_DEBUG)
endif

QUARTUS_BASE_QDB := base_static.qdb
SCRUB_CLEAN_FILES += $(QUARTUS_BASE_QDB)

SPL_DEBUG_GEN_HEX_DEPS += software/hps_debug/hps_debug.S software/hps_debug/Makefile software/hps_debug/Makefile_ARMCLANG.inc software/hps_debug/Makefile_GCC.inc software/hps_debug/scatter.scat

software/hps_debug/hps_debug.ihex: $(SPL_DEBUG_GEN_HEX_DEPS)
	$(MAKE) -C software/hps_debug

$(QUARTUS_SOF_WITH_HPS_DEBUG): $(QUARTUS_SOF) software/hps_debug/hps_debug.ihex
	@$(MKDIR) $(@D)
	quartus_pfg -c -o hps_path=software/hps_debug/hps_debug.ihex $< $@

$(QUARTUS_PR_RBF): %.rbf: %.pmsf
	quartus_pfg -c $< $@

ifeq ($(HAVE_QUARTUS),1)
SCRUB_CLEAN_FILES += $(QUARTUS_SOF) $(QUARTUS_SOF_WITH_HPS) $(QUARTUS_SOF_WITH_HPS_DEBUG) $(QUARTUS_RBF) $(QUARTUS_JIC) $(QUARTUS_OUTPUT_DIR)
endif

################################################


################################################
# QSYS/Quartus Project Generation
#  - we don't run this generation step automatically because
#    it will destroy any changes and/or customizations that
#    you've made to your qsys, top level hdl or your quartus
#    project
#
QSYS_QSYS_GEN := $(firstword $(wildcard create_*_qsys.tcl))
QUARTUS_TOP_GEN := $(firstword $(wildcard create_*_top.tcl))
QUARTUS_QSF_QPF_GEN := $(firstword $(wildcard create_*_quartus.tcl))

.PHONY: quartus_generate_qsf_qpf
ifneq ($(QUARTUS_QSF_QPF_GEN),)
quartus_generate_qsf_qpf: $(QUARTUS_QSF_QPF_GEN)
	@$(RM) $(QUARTUS_QSF) $(QUARTUS_QPF)
	quartus_sh --script=$< $(QUARTUS_TCL_ARGS)
else
quartus_generate_qsf_qpf:
	@$(ECHO) "Make target '$@' is not supported for this design"
endif

QUARTUS_TCL_ARGS += qsys_name $(patsubst %.qsys,%,$(QSYS_FILE_TOP))

.PHONY: quartus_generate_top
ifneq ($(QUARTUS_TOP_GEN),)
quartus_generate_top: $(QUARTUS_TOP_GEN)
	@$(RM) *_top.v
	quartus_sh --script=$< $(QUARTUS_TCL_ARGS)
else
quartus_generate_top:
	@$(ECHO) "Make target '$@' is not supported for this design"
endif

QSYS_GEN_QSYS_DEPS += quartus_generate_qsf_qpf

.PHONY: qsys_generate_qsys
ifneq ($(QSYS_QSYS_GEN),)
qsys_generate_qsys: $(QSYS_QSYS_GEN) $(QSYS_GEN_QSYS_DEPS) $(INTEL_CUSTOM_IP_DIR_TARGET)
	@$(RM) $(QSYS_FILE_TOP)
	qsys-script $(QSYS_ARGS) --script=$< $(QSYS_TCL_ARGS)
ifeq ($(HPS_ENABLE_SGMII),1)
	$(MAKE) quartus_add_post_sgmii_sdc
endif
	$(stamp_target)
else
qsys_generate_qsys:
	@$(ECHO) "Make target '$@' is not supported for this design"
endif

HELP_TARGETS += generate_from_tcl
generate_from_tcl.HELP := Generate the Quartus Project source files from tcl script source

.PHONY: generate_from_tcl
generate_from_tcl: generate_submodule $(INTEL_CUSTOM_IP_DIR_TARGET)
#	$(MAKE) $(USER_CONFIG_UPDATE) quartus_generate_qsf_qpf quartus_generate_top qsys_generate_qsys
	@$(ECHO) "generate_from_tcl done!"

ifeq ($(ENABLE_PARTIAL_RECONFIGURATION),1)
	$(MAKE) quartus_generate_pr_qsf qsys_generate_pr_qsys
endif
################################################


################################################
# Quartus Programming
QUARTUS_PGM_STAMP := $(call get_stamp_target,quartus_pgm)

# set this correctly for your board. If not set, assume the first board
# is your board
CLOSE_PARENTHESIS = )
BOARD_CABLE ?= $(shell jtagconfig | head -n1 | sed -e 's,[0-9]*[$(CLOSE_PARENTHESIS)][ \t]*,,')

# Default to 1 since this is the most common setting
BOARD_DEVICE_INDEX ?= 1


# issp_reset.tcl is required because of the issue described in CASE:487915
define quartus_pgm_sof
jtagconfig
quartus_pgm --mode=jtag $(if $(BOARD_CABLE),--cable="$(BOARD_CABLE)") --operation=p\;$1$(if $(BOARD_DEVICE_INDEX),"@$(BOARD_DEVICE_INDEX)")
jtagconfig $(if $(BOARD_CABLE),-c "$(BOARD_CABLE)") -n
system-console --script=issp_reset.tcl
endef

################################################


################################################
# Clean-up and Archive

AR_FILES += $(filter-out $(AR_FILTER_OUT),$(wildcard $(AR_REGEX)))

ifeq ($(ENABLE_PARTIAL_RECONFIGURATION),1)
AR_FILES += $(QUARTUS_BASE_QDB)
endif

CLEAN_FILES += $(filter-out $(AR_DIR) $(AR_FILES) ip,$(wildcard *))

HELP_TARGETS += tgz
tgz.HELP := Create a tarball with the barebones source files that comprise this design

.PHONY: tarball tgz
tarball tgz: $(AR_FILE)

$(AR_FILE):
	@$(MKDIR) $(@D)
	@$(if $(wildcard $(@D)/*.tar.gz),$(MKDIR) $(@D)/.archive;$(MV) $(@D)/*.tar.gz $(@D)/.archive)
	@$(ECHO) "Generating $@..."
	@$(TAR) -czf $@ $(AR_FILES)

SCRUB_CLEAN_FILES += $(CLEAN_FILES)
QSYS_GEN_FILES += $(filter-out $(wildcard ip/*/*.ip), $(wildcard ip/*/*))
SCRUB_CLEAN_FILES += $(QSYS_GEN_FILES)

HELP_TARGETS += scrub_clean
scrub_clean.HELP := Restore design to its barebones state

.PHONY: scrub scrub_clean
scrub scrub_clean:
	$(FIND) $(SOFTWARE_DIR) \( -name '*.o' -o -name '.depend*' -o -name '*.d' -o -name '*.dep' -o -name '*.objdump' -o -name '*.axf' \) -delete || true
	$(if $(strip $(wildcard $(SCRUB_CLEAN_FILES))),$(RM) $(wildcard $(SCRUB_CLEAN_FILES)),@$(ECHO) "You're already as clean as it gets!")

##scrub_clean_all -> clean all included qpf, qsf and qsys
.PHONY: scrub_clean_all
SCRUB_CLEAN_ALL_FILES += $(SCRUB_CLEAN_FILES)
SCRUB_CLEAN_ALL_FILES += ip/ *.qpf *.qsf *.qsys *.v *.sv
scrub_clean_all:
	$(FIND) $(SOFTWARE_DIR) \( -name '*.o' -o -name '.depend*' -o -name '*.d' -o -name '*.dep' \) -delete || true
	$(if $(strip $(wildcard $(SCRUB_CLEAN_ALL_FILES))),$(RM) $(wildcard $(SCRUB_CLEAN_ALL_FILES)),@$(ECHO) "You're already as clean as it gets!")

.PHONY: tgz_scrub_clean
tgz_scrub_clean:
	$(FIND) $(SOFTWARE_DIR) \( -name '*.o' -o -name '.depend*' -o -name '*.d' -o -name '*.dep' \) -delete || true
	$(MAKE) tgz AR_FILE=$(AR_FILE)
	$(MAKE) -s scrub_clean
	$(TAR) -xzf $(AR_FILE)

################################################


################################################
# Running Batch Jobs
ifneq ($(BATCH_TARGETS),)

BATCH_DIR := $(if $(TMP),$(TMP)/)batch/$(AR_TIMESTAMP)

.PHONY: $(patsubst %,batch-%,$(BATCH_TARGETS))
$(patsubst %,batch-%,$(BATCH_TARGETS)): batch-%: $(AR_FILE)
	@$(RM) $(BATCH_DIR)
	@$(MKDIR) $(BATCH_DIR)
	$(CP) $< $(BATCH_DIR)
	$(CD) $(BATCH_DIR) && $(TAR) -xzf $(notdir $<) && $(CHMOD) -R 755 *
	$(MAKE) -C $(BATCH_DIR) $*

endif # BATCH_TARGETS != <empty>
################################################



#===============================================
# Help
#===============================================
define get_help_modules
    help_modules := $1
endef

help:
	@cat $(PWD)/$(BUILD_DIR)/$(HELP_TITLE_FILE)
	$(eval $(call get_help_modules, $(filter-out  %.title, $(wildcard build/help.*))))
	@cat $(sort $(help_modules)) > build/help
	@sed -i '/^\s*$$/d' build/help
	@awk '{print $$0}'  build/help

