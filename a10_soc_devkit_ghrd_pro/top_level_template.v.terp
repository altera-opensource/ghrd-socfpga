//****************************************************************************
//
// SPDX-License-Identifier: MIT-0
// Copyright(c) 2015-2021 Intel Corporation.
//
//****************************************************************************
// This is a generated system top level RTL file. 

@@if {$HPS_SDRAM_ECC_ENABLE == 1} {
@@   set HPS_DDR_W 40
@@   set HPS_DDR_DM_W 5
@@   set HPS_DDR_DQS_W 5
@@} else {
@@   set HPS_DDR_W 32
@@   set HPS_DDR_DM_W 4
@@   set HPS_DDR_DQS_W 4
@@}
@@set F2H_IRQ_REMAIN [expr 32-$SGMII_COUNT]
@@
@@if {$FTRACE_ENABLE == 1 } {
@@   set ETRACE_ENABLE 0
@@} else {
@@   set ETRACE_ENABLE 1
@@}
@@
@@
module ${SYS_TOP_NAME} (
// FPGA peripherals ports
input  wire [3:0]  fpga_dipsw_pio,                   
output wire [3:0]  fpga_led_pio,                     
input  wire [3:0]  fpga_button_pio,  
@@if {$NIOSII_ENABLE == 1} {                 
output wire [0:0]  a10_emif_mem_mem_ck,               
output wire [0:0]  a10_emif_mem_mem_ck_n,             
output wire [16:0] a10_emif_mem_mem_a,                
output wire [0:0]  a10_emif_mem_mem_act_n,            
output wire [1:0]  a10_emif_mem_mem_ba,               
output wire [0:0]  a10_emif_mem_mem_bg,               
output wire [0:0]  a10_emif_mem_mem_cke,              
output wire [0:0]  a10_emif_mem_mem_cs_n,             
output wire [0:0]  a10_emif_mem_mem_odt,              
output wire [0:0]  a10_emif_mem_mem_reset_n,          
output wire [0:0]  a10_emif_mem_mem_par,              
input  wire [0:0]  a10_emif_mem_mem_alert_n,          
inout  wire [8:0]  a10_emif_mem_mem_dqs,              
inout  wire [8:0]  a10_emif_mem_mem_dqs_n,        
inout  wire [71:0] a10_emif_mem_mem_dq,              
inout  wire [8:0]  a10_emif_mem_mem_dbi_n,                         
input  wire        a10_emif_oct_oct_rzqin,  
input  wire        a10_emif_pll_ref_clk_clock_clk,
input  wire        uart_rx,
output wire        uart_tx,
@@} else {
// HPS memory controller ports
@@if {$HPS_SDRAM_DEVICE == "D9RPL"} {
// DDR3 dual ranks -1866 device
output wire [14:0]   hps_memory_mem_a,                           
output wire [2:0]    hps_memory_mem_ba,                          
output wire          hps_memory_mem_ck,                          
output wire          hps_memory_mem_ck_n,                        
output wire [1:0]    hps_memory_mem_cke,                         
output wire [1:0]    hps_memory_mem_cs_n,                        
output wire          hps_memory_mem_ras_n,                       
output wire          hps_memory_mem_cas_n,                       
output wire          hps_memory_mem_we_n,                        
output wire          hps_memory_mem_reset_n,                     
inout  wire [$HPS_DDR_W-1:0] hps_memory_mem_dq,                          
inout  wire [$HPS_DDR_DQS_W-1:0]  hps_memory_mem_dqs,                         
inout  wire [$HPS_DDR_DQS_W-1:0]  hps_memory_mem_dqs_n,                       
output wire [1:0]    hps_memory_mem_odt,                         
output wire [$HPS_DDR_DM_W-1:0]  hps_memory_mem_dm,                          
input  wire          hps_memory_oct_rzqin,     
input  wire          emif_ref_clk,  
@@} elseif {$HPS_SDRAM_DEVICE == "D9PZN"} {
// DDR3 single rank -2133 device
output wire [14:0]   hps_memory_mem_a,                           
output wire [2:0]    hps_memory_mem_ba,                          
output wire          hps_memory_mem_ck,                          
output wire          hps_memory_mem_ck_n,                        
output wire          hps_memory_mem_cke,                         
output wire          hps_memory_mem_cs_n,                        
output wire          hps_memory_mem_ras_n,                       
output wire          hps_memory_mem_cas_n,                       
output wire          hps_memory_mem_we_n,                        
output wire          hps_memory_mem_reset_n,                     
inout  wire [$HPS_DDR_W-1:0] hps_memory_mem_dq,                          
inout  wire [$HPS_DDR_DQS_W-1:0]  hps_memory_mem_dqs,                         
inout  wire [$HPS_DDR_DQS_W-1:0]  hps_memory_mem_dqs_n,                       
output wire          hps_memory_mem_odt,                         
output wire [$HPS_DDR_DM_W-1:0]  hps_memory_mem_dm,                          
input  wire          hps_memory_oct_rzqin,     
input  wire          emif_ref_clk,  
@@} elseif {$HPS_SDRAM_DEVICE == "D9RGX" || $HPS_SDRAM_DEVICE == "D9TNZ" || $HPS_SDRAM_DEVICE == "D9WFH"} {
// DDR4 single rank -2133 device
output wire          hps_memory_mem_act_n,
output wire          hps_memory_mem_bg,
output wire          hps_memory_mem_par,
input  wire          hps_memory_mem_alert_n,
inout  wire [$HPS_DDR_DM_W-1:0]  hps_memory_mem_dbi_n,
output wire [16:0]   hps_memory_mem_a,                           
output wire [1:0]    hps_memory_mem_ba,
output wire          hps_memory_mem_ck,                          
output wire          hps_memory_mem_ck_n,                        
output wire          hps_memory_mem_cke,                         
output wire          hps_memory_mem_cs_n,                                            
output wire          hps_memory_mem_reset_n,                     
inout  wire [$HPS_DDR_W-1:0] hps_memory_mem_dq,                          
inout  wire [$HPS_DDR_DQS_W-1:0]  hps_memory_mem_dqs,                         
inout  wire [$HPS_DDR_DQS_W-1:0]  hps_memory_mem_dqs_n,                       
output wire          hps_memory_mem_odt,                                          
input  wire          hps_memory_oct_rzqin,     
input  wire          emif_ref_clk,  
@@} else {
// No SDRAM selected in design_config.tcl
@@}
// HPS peripherals
output wire          hps_emac0_TX_CLK,   
output wire          hps_emac0_TXD0,     
output wire          hps_emac0_TXD1,     
output wire          hps_emac0_TXD2,     
output wire          hps_emac0_TXD3,     
input  wire          hps_emac0_RXD0,     
inout  wire          hps_emac0_MDIO,     
output wire          hps_emac0_MDC,      
input  wire          hps_emac0_RX_CTL,   
output wire          hps_emac0_TX_CTL,   
input  wire          hps_emac0_RX_CLK,   
input  wire          hps_emac0_RXD1,     
input  wire          hps_emac0_RXD2,     
input  wire          hps_emac0_RXD3, 
inout  wire          hps_usb0_D0,        
inout  wire          hps_usb0_D1,        
inout  wire          hps_usb0_D2,        
inout  wire          hps_usb0_D3,        
inout  wire          hps_usb0_D4,        
inout  wire          hps_usb0_D5,        
inout  wire          hps_usb0_D6,        
inout  wire          hps_usb0_D7,        
input  wire          hps_usb0_CLK,       
output wire          hps_usb0_STP,       
input  wire          hps_usb0_DIR,       
input  wire          hps_usb0_NXT,   
output wire          hps_spim1_CLK,
output wire          hps_spim1_MOSI,
input  wire          hps_spim1_MISO,
output wire          hps_spim1_SS0_N,
output wire          hps_spim1_SS1_N,
input  wire          hps_uart1_RX,       
output wire          hps_uart1_TX,       
inout  wire          hps_i2c1_SDA,       
inout  wire          hps_i2c1_SCL,       
@@if {$BOOT_SOURCE == "SDMMC"} {  
inout  wire          hps_sdio_CMD,
output wire          hps_sdio_CLK,
inout  wire          hps_sdio_D0,
inout  wire          hps_sdio_D1,
inout  wire          hps_sdio_D2,
inout  wire          hps_sdio_D3,
inout  wire          hps_sdio_D4,
inout  wire          hps_sdio_D5,
inout  wire          hps_sdio_D6,
inout  wire          hps_sdio_D7,
@@} elseif {$BOOT_SOURCE == "QSPI"} {
inout  wire          hps_qspi_IO0,          
inout  wire          hps_qspi_IO1,          
inout  wire          hps_qspi_IO2_WPN,      
inout  wire          hps_qspi_IO3_HOLD,     
output wire          hps_qspi_CLK,          
output wire          hps_qspi_SS0,  
@@} elseif {$BOOT_SOURCE == "NAND"} {
output wire          hps_nand_ALE, 
output wire          hps_nand_CE_N,
output wire          hps_nand_CLE, 
output wire          hps_nand_RE_N,
input  wire          hps_nand_RB,  
inout  wire          hps_nand_ADQ0,
inout  wire          hps_nand_ADQ1,
inout  wire          hps_nand_ADQ2,
inout  wire          hps_nand_ADQ3,
inout  wire          hps_nand_ADQ4,
inout  wire          hps_nand_ADQ5,
inout  wire          hps_nand_ADQ6,
inout  wire          hps_nand_ADQ7,
output wire          hps_nand_WE_N,
@@} else {
// Boot source is neither SDMMC, QSPI nor NAND as per design_config
@@}
@@if {$ETRACE_ENABLE == 1} {
output wire          hps_trace_CLK,      
output wire          hps_trace_D0,       
output wire          hps_trace_D1,       
output wire          hps_trace_D2,       
output wire          hps_trace_D3,         
@@}
@@if {$FTRACE_ENABLE == 1} {
output wire [15:0]   ftrace_data,
output wire          ftrace_clk,
@@}
inout  wire          hps_gpio_GPIO14,    
inout  wire          hps_gpio_GPIO05,
inout  wire          hps_gpio_GPIO16,    
inout  wire          hps_gpio_GPIO17, 
inout  wire          hps_gpio_GPIO19, 
// Other HPS-FPGA peripherals
@@if {$SGMII_ENABLE == 1} {  
@@  for {set y 1} {$y<=$SGMII_COUNT} {incr y} {
output wire          emac${y}_fpga_mdc,
inout  wire          emac${y}_fpga_mdio,                                 
input  wire          emac${y}_sgmii_rxp,                                 
output wire          emac${y}_sgmii_txp,                                 
input  wire          sgmii${y}_phy_irq_n,
output wire          sgmii${y}_phy_reset_n,
@@  }
input  wire          pcs_clk_125,
@@}
@@}
@@if {$DISP_PORT_ENABLE == 1} { 
input  wire  			dp_refclk,
input  wire  			tx_hpd,
output wire 			dp_on,
inout  wire  			dp_aux_ch_p,
inout  wire  			dp_aux_ch_n,
output wire [3:0] 		dp_tx_serial_out,
@@}
@@if {$PCIE_ENABLE == 1} {
input	    wire	  		pcie_refclk_100,
@@if {$PCIE_COUNT == 8} {
input 		wire [7:0] 		pcie_rx_serial_in,  
output 		wire [7:0] 		pcie_tx_serial_out,
@@} else {
input 		wire [3:0] 		pcie_rx_serial_in,  
output 		wire [3:0] 		pcie_tx_serial_out,
@@}
input	    wire 	  		pcie_a10_hip_npor_pin_perst,
@@}
@@if {$TSE_ENABLE == 1} {  
input  wire          pcs_clk_125,
@@  for {set k 0} {$k<2} {incr k} {
output wire          mac${k}_fpga_mdc,
inout  wire          mac${k}_fpga_mdio,                                 
input  wire          mac${k}_sgmii_rxp,                                 
output wire          mac${k}_sgmii_txp,                                 
input  wire          sgmii${k}_phy_irq_n,
output wire          sgmii${k}_phy_reset_n,
@@  }
@@} 
// FPGA clock and reset
input  wire          fpga_clk_100,
input  wire          fpga_reset_n  
);

// internal wires and registers declaration
wire [3:0]  fpga_debounced_buttons;
wire [3:0]  fpga_led_internal;
wire [27:0] stm_hw_events;
wire        hps_fpga_reset;
wire [2:0]  hps_reset_req;
wire        hps_cold_reset;
wire        hps_warm_reset;
wire        hps_debug_reset;

@@if {$SGMII_ENABLE == 1} {
wire [31:0] f2h_interrupt;      
@@}

@@if {$DISP_PORT_ENABLE == 1} { 
// ------------------------------
// Display Port system clock
// ------------------------------
wire 		clk_270;
wire 		clk_cal_50;
wire 		clk_16;
wire 		clk_vid;
// ------------------------------
// Video Test Pattern Generator
// ------------------------------
@@if {$PARTIAL_RECONFIGURATION_DISP_PORT_MIX_ENABLE == 1} {
wire 		 	pr_src_reset;
wire [59:0] 	tpg_outd;
wire [1:0]  	tpg_de;
wire [1:0]  	tpg_h;
wire [1:0]  	tpg_v;
@@} else {
wire [23:0] 	tpg_outd;
wire 	    	tpg_de;
wire 	    	tpg_h;
wire 	    	tpg_v;
@@}
// ----------------------
// Display Port
// ----------------------
wire          dp_tx_rcfg_req;
wire          dp_tx_rcfg_ack;
wire [7:0]    dp_tx_rcfg_vod;
wire [7:0]    dp_tx_rcfg_emp;
wire          dp_txpll_rcfg_req;
wire          dp_txpll_rcfg_ack;
wire          dp_tx_rcfg_busy;
wire [7:0]    dp_tx_link_rate_8bits;
wire          	xcvr_ctrl_txpll_powerdown;
wire [3:0]    	dp_tx_cal_busy;
wire [3:0]    	gxb_tx_clkout;
wire          	dp_txpll_locked;
wire [159:0] 	tx_parallel_data;
wire 			dp_tx_aux_aux_in;
wire 			dp_tx_aux_aux_out;
wire 			dp_tx_aux_aux_oe;

// -------------------------------
// XCVR FPLL
// -------------------------------
wire 			tx_pll_locked;
wire			tx_pll_cal_busy;
wire 			tx_pll_reconfig_write;
wire 			tx_pll_reconfig_read;
wire [9:0] 		tx_pll_reconfig_address;
wire [31:0] 	tx_pll_reconfig_writedata;
wire [31:0] 	tx_pll_reconfig_readdata;
wire 			tx_pll_reconfig_waitrequest;
// -------------------------------
// XCVR reconfiguration and reset
// -------------------------------
wire 			tx_gxb_reconfig_write;
wire			tx_gxb_reconfig_read;
wire [11:0] 	tx_gxb_reconfig_address;
wire [31:0] 	tx_gxb_reconfig_writedata;
wire [31:0] 	tx_gxb_reconfig_readdata;
wire 			tx_gxb_reconfig_waitrequest;

wire 		tx_xcvr_reset;
wire 		rx_cal_busy;
wire 		tx_cal_busy;
wire		tx_xcvr_busy;
wire		tx_xcvr_cal_busy;
wire [3:0] 	tx_analogreset;
wire [3:0] 	tx_digitalreset;
wire [3:0] 	gxb_tx_cal_busy;
wire [3:0] 	tx_ready;
wire [3:0] 	res_tx_cal_busy;
wire [3:0] 	tx_analogreset_ack;
wire [3:0] 	gxb_tx_coreclkin;
wire 		bitec_reconfig_reset;
wire 		xcvr_ctrl_reset; 
wire		tx_pll_mcgb_rst;
@@}

@@if {$PCIE_ENABLE == 1} {
wire		pcie_npor_npor;
wire 		coreclk_fanout_clk;
wire 		coreclk_fanout_reset_n;
wire [4:0]	pcie_a10_hip_pipe_sim_ltssmstate;
wire [4:0] 	pcie_a10_hip_status_ltssmstate;
@@}
  
@@if {$PARTIAL_RECONFIGURATION == 1} {
@@  for {set m 0} {$m<$PR_REGION_COUNT} {incr m} {
wire 		  	pr_handshake_start_req_ack_loopback_wire_${m};
wire 		  	pr_handshake_stop_req_ack_loopback_wire_${m};
@@}
@@if {$FREEZE_ACK_DELAY_ENABLE == 1} {
@@  for {set m 0} {$m<$PR_REGION_COUNT} {incr m} {
wire 		  	pr_handshake_start_req_ack_loopback_wire_delay_ver_${m};
wire 		 	pr_handshake_stop_req_ack_loopback_wire_delay_ver_${m};
wire 		  	freeze_wire_${m};     
wire 		  	illegal_request_wire_${m}; 
@@}
wire [31:0] 	start_ack_delay_cnt;
wire [31:0] 	stop_ack_delay_cnt;
@@}  
@@}

@@if {$NIOSII_ENABLE == 1} {
wire        a10_emif_status_local_cal_success;
wire        a10_emif_status_local_cal_fail;
wire		ecc_user_interrupt;
@@if {$TSE_ENABLE == 0} {
wire [0:0] irq_bg_receiver_irq_irq;
@@}
@@}

@@if {$TSE_ENABLE == 1} {
@@if {$NIOSII_ENABLE == 1} {
wire [2:0] irq_bg_receiver_irq_irq;
@@} else {
wire [31:0] f2h_interrupt;
@@}
@@  for {set k 0} {$k<2} {incr k} {
wire 			sgmii_${k}_mac_mdio_in;
wire 			sgmii_${k}_mac_mdio_oen;
wire 			sgmii_${k}_mac_mdio_out;
@@}  
@@}

// connection of internal logics
assign fpga_led_pio     = fpga_led_internal;
assign stm_hw_events    = {{16{1'b0}}, fpga_dipsw_pio, fpga_led_internal, fpga_debounced_buttons};

@@if {$SGMII_ENABLE == 1} {
@@  for {set y 1} {$y<=$SGMII_COUNT} {incr y} {
assign emac${y}_fpga_mdio    = sgmii_${y}_emac_mdio_gmii_mdo_o_e ? sgmii_${y}_emac_mdio_gmii_mdo_o : 1'bz;
assign sgmii${y}_phy_reset_n = ~hps_fpga_reset;
assign f2h_interrupt[$y-1]   = ~sgmii${y}_phy_irq_n;
@@  }
assign f2h_interrupt[31:32-$F2H_IRQ_REMAIN] = {$F2H_IRQ_REMAIN{1'b0}};
@@}

@@if {$DISP_PORT_ENABLE == 1} { 
assign clk_270 			  = dp_refclk;
assign dp_on 			  = 1'b1;
assign rx_cal_busy 		  = 1'b0;
assign tx_cal_busy 		  = ~&tx_ready;
assign res_tx_cal_busy[0] = gxb_tx_cal_busy[0] | tx_pll_cal_busy;
assign res_tx_cal_busy[1] = gxb_tx_cal_busy[1] | tx_pll_cal_busy;
assign res_tx_cal_busy[2] = gxb_tx_cal_busy[2] | tx_pll_cal_busy;
assign res_tx_cal_busy[3] = gxb_tx_cal_busy[3] | tx_pll_cal_busy;
assign gxb_tx_coreclkin = {4{gxb_tx_clkout[0]}};
assign tx_xcvr_cal_busy = |gxb_tx_cal_busy;
@@if {$NIOSII_ENABLE == 0} {
@@if {$PARTIAL_RECONFIGURATION_DISP_PORT_MIX_ENABLE == 1} {
assign bitec_reconfig_reset = hps_fpga_reset | ~fpga_reset_n | pr_src_reset;
assign xcvr_ctrl_reset = tx_xcvr_reset | hps_fpga_reset | ~fpga_reset_n | pr_src_reset;
assign tx_pll_mcgb_rst = hps_fpga_reset | ~fpga_reset_n | pr_src_reset;
@@} else {
assign bitec_reconfig_reset = hps_fpga_reset | ~fpga_reset_n;
assign xcvr_ctrl_reset = tx_xcvr_reset | hps_fpga_reset | ~fpga_reset_n;
assign tx_pll_mcgb_rst = hps_fpga_reset | ~fpga_reset_n;
@@}    
@@} else {
assign bitec_reconfig_reset = ~emif_usr_reset_reset_n | ~fpga_reset_n;
assign xcvr_ctrl_reset = tx_xcvr_reset | ~emif_usr_reset_reset_n | ~fpga_reset_n;
assign tx_pll_mcgb_rst = ~emif_usr_reset_reset_n | ~fpga_reset_n;
@@}
@@}

@@if {$PCIE_ENABLE == 1} {
@@if {$NIOSII_ENABLE == 0} {
assign pcie_npor_npor = ~hps_fpga_reset & pcie_a10_hip_npor_pin_perst & fpga_reset_n; 
@@} else {
assign pcie_npor_npor = ~emif_usr_reset_reset_n & pcie_a10_hip_npor_pin_perst & fpga_reset_n;
@@}  
@@}

@@if {$NIOSII_ENABLE == 1 && $TSE_ENABLE == 0} {
assign irq_bg_receiver_irq_irq = ecc_user_interrupt;
@@}

@@if {$TSE_ENABLE == 1} {
@@  for {set k 0} {$k<2} {incr k} {
assign mac${k}_fpga_mdio = sgmii_${k}_mac_mdio_oen ? 1'bz : sgmii_${k}_mac_mdio_out;
assign sgmii_${k}_mac_mdio_in = mac${k}_fpga_mdio;
@@if {$NIOSII_ENABLE == 1} {
assign sgmii${k}_phy_reset_n = emif_usr_reset_reset_n;
assign irq_bg_receiver_irq_irq = {~sgmii1_phy_irq_n,~sgmii0_phy_irq_n,ecc_user_interrupt};
@@} else {
assign sgmii${k}_phy_reset_n = ~hps_fpga_reset;
assign f2h_interrupt[$k] = ~sgmii${k}_phy_irq_n;
@@}
@@}
@@if {$NIOSII_ENABLE == 0} {
assign f2h_interrupt[31:32-30] = {30{1'b0}};
@@}
@@}

// SoC sub-system module
${QSYS_NAME} soc_inst (
@@if {$NIOSII_ENABLE == 1} {  
.a10_emif_mem_mem_ck                            				(a10_emif_mem_mem_ck),       
.a10_emif_mem_mem_ck_n                          				(a10_emif_mem_mem_ck_n),       
.a10_emif_mem_mem_a                             				(a10_emif_mem_mem_a),       
.a10_emif_mem_mem_act_n                        		 			(a10_emif_mem_mem_act_n),       
.a10_emif_mem_mem_ba                            				(a10_emif_mem_mem_ba),       
.a10_emif_mem_mem_bg                            				(a10_emif_mem_mem_bg),       
.a10_emif_mem_mem_cke                           				(a10_emif_mem_mem_cke),       
.a10_emif_mem_mem_cs_n                          				(a10_emif_mem_mem_cs_n),       
.a10_emif_mem_mem_odt                          			 		(a10_emif_mem_mem_odt),       
.a10_emif_mem_mem_reset_n                       				(a10_emif_mem_mem_reset_n),       
.a10_emif_mem_mem_par                           				(a10_emif_mem_mem_par),       
.a10_emif_mem_mem_alert_n                       				(a10_emif_mem_mem_alert_n),       
.a10_emif_mem_mem_dqs                           				(a10_emif_mem_mem_dqs),       
.a10_emif_mem_mem_dqs_n                         				(a10_emif_mem_mem_dqs_n),       
.a10_emif_mem_mem_dq                            				(a10_emif_mem_mem_dq),       
.a10_emif_mem_mem_dbi_n                         				(a10_emif_mem_mem_dbi_n),       
.a10_emif_pll_ref_clk_clock_clk                 				(a10_emif_pll_ref_clk_clock_clk),  
.a10_emif_oct_oct_rzqin                         				(a10_emif_oct_oct_rzqin),  
.a10_emif_status_local_cal_success 								(a10_emif_status_local_cal_success),  
.a10_emif_status_local_cal_fail 								(a10_emif_status_local_cal_fail), 
.a10_emif_ctrl_ecc_user_interrupt_ctrl_ecc_user_interrupt 		(ecc_user_interrupt),
@@if {$TSE_ENABLE == 0} {  
.irq_bg_receiver_irq_irq                                (irq_bg_receiver_irq_irq),
@@}
.button_pio_external_connection_export 		 					(fpga_debounced_buttons),  
.dipsw_pio_external_connection_export 		 					(fpga_dipsw_pio),     
.led_pio_external_connection_in_port 		 					(fpga_led_internal),  
.led_pio_external_connection_out_port 		 					(fpga_led_internal),   
.uart_16550_rs_232_serial_sin 			 						(uart_rx), 
.uart_16550_rs_232_serial_sout 			 						(uart_tx), 
.uart_16550_rs_232_serial_sout_oe 		 						(),    
@@} else {
.f2h_stm_hw_events_stm_hwevents                (stm_hw_events),                   
.pio_dipsw_external_connection_export          (fpga_dipsw_pio),    
.pio_led_external_connection_in_port           (fpga_led_internal),
.pio_led_external_connection_out_port          (fpga_led_internal),                   
.pio_button_external_connection_export         (fpga_debounced_buttons),    
.hps_io_hps_io_phery_emac0_TX_CLK              (hps_emac0_TX_CLK), 
.hps_io_hps_io_phery_emac0_TXD0                (hps_emac0_TXD0),   
.hps_io_hps_io_phery_emac0_TXD1                (hps_emac0_TXD1),   
.hps_io_hps_io_phery_emac0_TXD2                (hps_emac0_TXD2),   
.hps_io_hps_io_phery_emac0_TXD3                (hps_emac0_TXD3),   
.hps_io_hps_io_phery_emac0_MDIO                (hps_emac0_MDIO),   
.hps_io_hps_io_phery_emac0_MDC                 (hps_emac0_MDC),    
.hps_io_hps_io_phery_emac0_RX_CTL              (hps_emac0_RX_CTL), 
.hps_io_hps_io_phery_emac0_TX_CTL              (hps_emac0_TX_CTL), 
.hps_io_hps_io_phery_emac0_RX_CLK              (hps_emac0_RX_CLK), 
.hps_io_hps_io_phery_emac0_RXD0                (hps_emac0_RXD0),   
.hps_io_hps_io_phery_emac0_RXD1                (hps_emac0_RXD1),   
.hps_io_hps_io_phery_emac0_RXD2                (hps_emac0_RXD2),   
.hps_io_hps_io_phery_emac0_RXD3                (hps_emac0_RXD3),
.hps_io_hps_io_phery_usb0_DATA0                (hps_usb0_D0),      
.hps_io_hps_io_phery_usb0_DATA1                (hps_usb0_D1),      
.hps_io_hps_io_phery_usb0_DATA2                (hps_usb0_D2),      
.hps_io_hps_io_phery_usb0_DATA3                (hps_usb0_D3),      
.hps_io_hps_io_phery_usb0_DATA4                (hps_usb0_D4),      
.hps_io_hps_io_phery_usb0_DATA5                (hps_usb0_D5),      
.hps_io_hps_io_phery_usb0_DATA6                (hps_usb0_D6),      
.hps_io_hps_io_phery_usb0_DATA7                (hps_usb0_D7),      
.hps_io_hps_io_phery_usb0_CLK                  (hps_usb0_CLK),     
.hps_io_hps_io_phery_usb0_STP                  (hps_usb0_STP),     
.hps_io_hps_io_phery_usb0_DIR                  (hps_usb0_DIR),     
.hps_io_hps_io_phery_usb0_NXT                  (hps_usb0_NXT),   
.hps_io_hps_io_phery_spim1_CLK                 (hps_spim1_CLK),
.hps_io_hps_io_phery_spim1_MOSI                (hps_spim1_MOSI),
.hps_io_hps_io_phery_spim1_MISO                (hps_spim1_MISO),
.hps_io_hps_io_phery_spim1_SS0_N               (hps_spim1_SS0_N),
.hps_io_hps_io_phery_spim1_SS1_N               (hps_spim1_SS1_N),
.hps_io_hps_io_phery_uart1_RX                  (hps_uart1_RX),     
.hps_io_hps_io_phery_uart1_TX                  (hps_uart1_TX),  
@@if {$BOOT_SOURCE == "SDMMC"} {
.hps_io_hps_io_phery_sdmmc_CMD                 (hps_sdio_CMD),     
.hps_io_hps_io_phery_sdmmc_D0                  (hps_sdio_D0),      
.hps_io_hps_io_phery_sdmmc_D1                  (hps_sdio_D1),      
.hps_io_hps_io_phery_sdmmc_D2                  (hps_sdio_D2),      
.hps_io_hps_io_phery_sdmmc_D3                  (hps_sdio_D3),      
.hps_io_hps_io_phery_sdmmc_D4                  (hps_sdio_D4),
.hps_io_hps_io_phery_sdmmc_D5                  (hps_sdio_D5),
.hps_io_hps_io_phery_sdmmc_D6                  (hps_sdio_D6),
.hps_io_hps_io_phery_sdmmc_D7                  (hps_sdio_D7),
.hps_io_hps_io_phery_sdmmc_CCLK                (hps_sdio_CLK),   
@@} elseif {$BOOT_SOURCE == "QSPI"} {
.hps_io_hps_io_phery_qspi_IO0                  (hps_qspi_IO0),      
.hps_io_hps_io_phery_qspi_IO1                  (hps_qspi_IO1),      
.hps_io_hps_io_phery_qspi_IO2_WPN              (hps_qspi_IO2_WPN),  
.hps_io_hps_io_phery_qspi_IO3_HOLD             (hps_qspi_IO3_HOLD), 
.hps_io_hps_io_phery_qspi_CLK                  (hps_qspi_CLK),      
.hps_io_hps_io_phery_qspi_SS0                  (hps_qspi_SS0), 
@@} elseif {$BOOT_SOURCE == "NAND"} {
.hps_io_hps_io_phery_nand_ALE                  (hps_nand_ALE), 
.hps_io_hps_io_phery_nand_CE_N                 (hps_nand_CE_N),
.hps_io_hps_io_phery_nand_CLE                  (hps_nand_CLE), 
.hps_io_hps_io_phery_nand_RE_N                 (hps_nand_RE_N),
.hps_io_hps_io_phery_nand_RB                   (hps_nand_RB),  
.hps_io_hps_io_phery_nand_ADQ0                 (hps_nand_ADQ0),
.hps_io_hps_io_phery_nand_ADQ1                 (hps_nand_ADQ1),
.hps_io_hps_io_phery_nand_ADQ2                 (hps_nand_ADQ2),
.hps_io_hps_io_phery_nand_ADQ3                 (hps_nand_ADQ3),
.hps_io_hps_io_phery_nand_ADQ4                 (hps_nand_ADQ4),
.hps_io_hps_io_phery_nand_ADQ5                 (hps_nand_ADQ5),
.hps_io_hps_io_phery_nand_ADQ6                 (hps_nand_ADQ6),
.hps_io_hps_io_phery_nand_ADQ7                 (hps_nand_ADQ7),
.hps_io_hps_io_phery_nand_WE_N                 (hps_nand_WE_N),
@@} else {
@@ # Likely FPGA boot is selected
.f2h_boot_from_fpga_boot_from_fpga_ready      (1'b1),
.f2h_boot_from_fpga_boot_from_fpga_on_failure (1'b1),
@@}
@@if {$ETRACE_ENABLE == 1} {
.hps_io_hps_io_phery_trace_CLK                 (hps_trace_CLK),
.hps_io_hps_io_phery_trace_D0                  (hps_trace_D0),
.hps_io_hps_io_phery_trace_D1                  (hps_trace_D1),
.hps_io_hps_io_phery_trace_D2                  (hps_trace_D2),
.hps_io_hps_io_phery_trace_D3                  (hps_trace_D3),
@@}
@@if {$HPS_SDRAM_DEVICE == "D9RPL" || $HPS_SDRAM_DEVICE == "D9PZN"} {
.emif_a10_hps_0_mem_conduit_end_mem_ck         (hps_memory_mem_ck),     
.emif_a10_hps_0_mem_conduit_end_mem_ck_n       (hps_memory_mem_ck_n),   
.emif_a10_hps_0_mem_conduit_end_mem_a          (hps_memory_mem_a),      
.emif_a10_hps_0_mem_conduit_end_mem_ba         (hps_memory_mem_ba),     
.emif_a10_hps_0_mem_conduit_end_mem_cke        (hps_memory_mem_cke),    
.emif_a10_hps_0_mem_conduit_end_mem_cs_n       (hps_memory_mem_cs_n),   
.emif_a10_hps_0_mem_conduit_end_mem_odt        (hps_memory_mem_odt),    
.emif_a10_hps_0_mem_conduit_end_mem_reset_n    (hps_memory_mem_reset_n),
.emif_a10_hps_0_mem_conduit_end_mem_we_n       (hps_memory_mem_we_n),   
.emif_a10_hps_0_mem_conduit_end_mem_ras_n      (hps_memory_mem_ras_n),  
.emif_a10_hps_0_mem_conduit_end_mem_cas_n      (hps_memory_mem_cas_n),  
.emif_a10_hps_0_mem_conduit_end_mem_dqs        (hps_memory_mem_dqs),    
.emif_a10_hps_0_mem_conduit_end_mem_dqs_n      (hps_memory_mem_dqs_n),  
.emif_a10_hps_0_mem_conduit_end_mem_dq         (hps_memory_mem_dq),     
.emif_a10_hps_0_mem_conduit_end_mem_dm         (hps_memory_mem_dm),     
.emif_a10_hps_0_oct_conduit_end_oct_rzqin      (hps_memory_oct_rzqin), 
.emif_a10_hps_0_pll_ref_clk_clock_sink_clk     (emif_ref_clk),
@@} elseif {$HPS_SDRAM_DEVICE == "D9RGX" || $HPS_SDRAM_DEVICE == "D9TNZ" || $HPS_SDRAM_DEVICE == "D9WFH"} {
.emif_a10_hps_0_mem_conduit_end_mem_ck         (hps_memory_mem_ck),     
.emif_a10_hps_0_mem_conduit_end_mem_ck_n       (hps_memory_mem_ck_n),   
.emif_a10_hps_0_mem_conduit_end_mem_a          (hps_memory_mem_a),      
.emif_a10_hps_0_mem_conduit_end_mem_act_n      (hps_memory_mem_act_n),
.emif_a10_hps_0_mem_conduit_end_mem_ba         (hps_memory_mem_ba), 
.emif_a10_hps_0_mem_conduit_end_mem_bg         (hps_memory_mem_bg),
.emif_a10_hps_0_mem_conduit_end_mem_cke        (hps_memory_mem_cke),    
.emif_a10_hps_0_mem_conduit_end_mem_cs_n       (hps_memory_mem_cs_n),   
.emif_a10_hps_0_mem_conduit_end_mem_odt        (hps_memory_mem_odt),    
.emif_a10_hps_0_mem_conduit_end_mem_reset_n    (hps_memory_mem_reset_n),
.emif_a10_hps_0_mem_conduit_end_mem_par        (hps_memory_mem_par), 
.emif_a10_hps_0_mem_conduit_end_mem_alert_n    (hps_memory_mem_alert_n), 
.emif_a10_hps_0_mem_conduit_end_mem_dqs        (hps_memory_mem_dqs),    
.emif_a10_hps_0_mem_conduit_end_mem_dqs_n      (hps_memory_mem_dqs_n),  
.emif_a10_hps_0_mem_conduit_end_mem_dq         (hps_memory_mem_dq), 
.emif_a10_hps_0_mem_conduit_end_mem_dbi_n      (hps_memory_mem_dbi_n), 
.emif_a10_hps_0_oct_conduit_end_oct_rzqin      (hps_memory_oct_rzqin), 
.emif_a10_hps_0_pll_ref_clk_clock_sink_clk     (emif_ref_clk),
@@} else {
// No EMIF ports instantiated as no SDRAM selected in design_config.tcl
@@}
@@if {$FTRACE_ENABLE == 1} {
.trace_wrapper_0_f2h_clk_in_clk_ctl            (1'b1),     // use HPS internal debug trace clock to drive TRACE interface
.trace_wrapper_0_f2h_clk_in_clk                (1'b0),
.trace_wrapper_0_trace_clk_out_clk             (ftrace_clk),
.trace_wrapper_0_trace_data_out_export         (ftrace_data),
@@}
.hps_io_hps_io_gpio_gpio1_io5                  (hps_gpio_GPIO05),  
.hps_io_hps_io_gpio_gpio1_io14                 (hps_gpio_GPIO14),
.hps_io_hps_io_gpio_gpio1_io16                 (hps_gpio_GPIO16),
.hps_io_hps_io_gpio_gpio1_io17                 (hps_gpio_GPIO17),
.hps_io_hps_io_gpio_gpio1_io19                 (hps_gpio_GPIO19),
.hps_io_hps_io_phery_i2c1_SDA                  (hps_i2c1_SDA),
.hps_io_hps_io_phery_i2c1_SCL                  (hps_i2c1_SCL),  
@@if {$SGMII_ENABLE == 1} {
@@  for {set y 1} {$y<=$SGMII_COUNT} {incr y} {
.emac${y}_md_clk_clk                              (emac${y}_fpga_mdc),
.sgmii_${y}_emac_mdio_gmii_mdi_i                  (emac${y}_fpga_mdio),                      
.sgmii_${y}_emac_mdio_gmii_mdo_o                  (sgmii_${y}_emac_mdio_gmii_mdo_o),                      
.sgmii_${y}_emac_mdio_gmii_mdo_o_e                (sgmii_${y}_emac_mdio_gmii_mdo_o_e),                    
.sgmii_${y}_emac_ptp_ptp_aux_ts_trig_i            (1'b0),                
.sgmii_${y}_emac_ptp_ptp_pps_o                    (),                        
.sgmii_${y}_tse_rx_is_lockedtoref_rx_is_lockedtoref (),   
.sgmii_${y}_tse_rx_set_locktodata_rx_set_locktodata (1'b0),   
.sgmii_${y}_tse_rx_set_locktoref_rx_set_locktoref 	(1'b0),     
.sgmii_${y}_tse_serdes_control_connection_export  	(),      
.sgmii_${y}_tse_serial_connection_rxp             (emac${y}_sgmii_rxp),                 
.sgmii_${y}_tse_serial_connection_txp             (emac${y}_sgmii_txp),                 
.sgmii_${y}_tse_sgmii_status_connection_set_10    (),        
.sgmii_${y}_tse_sgmii_status_connection_set_1000  (),      // to be connect to LED for link status
.sgmii_${y}_tse_sgmii_status_connection_set_100   (),       
.sgmii_${y}_tse_sgmii_status_connection_hd_ena    (),        
.sgmii_${y}_tse_status_led_connection_crs         (),             
.sgmii_${y}_tse_status_led_connection_link        (),       // link status LED   
.sgmii_${y}_tse_status_led_connection_panel_link  (),      
.sgmii_${y}_tse_status_led_connection_col         (),             
.sgmii_${y}_tse_status_led_connection_an          (),              
.sgmii_${y}_tse_status_led_connection_char_err    (),        
.sgmii_${y}_tse_status_led_connection_disp_err    (),        
.sgmii_${y}_xcvr_reset_control_0_pll_select_pll_select 	(), // set to 0 when not using multiple PLL
.sgmii_${y}_xcvr_reset_control_0_rx_ready_rx_ready		(),    
.sgmii_${y}_xcvr_reset_control_0_tx_ready_tx_ready		(), 
@@  }
.f2h_irq_irq                                      (f2h_interrupt),
.ref_clk_125_clk                                  (pcs_clk_125),
@@}
@@}
@@if {$DISP_PORT_ENABLE == 1} {
@@if {$PARTIAL_RECONFIGURATION_DISP_PORT_MIX_ENABLE == 1} {
.pr_source_reset_reset									(pr_src_reset),
@@}
.dp_0_video_pll_locked_export       		   	(video_pll_locked),                                      
.dp_0_video_pll_outclk0_clk          		   	(clk_vid),                                        
.dp_0_video_pll_outclk1_clk          		   	(clk_16),                                     
.dp_0_video_pll_outclk2_clk          		   	(clk_cal_50),
.dp_0_video_pll_refclk_clk								(clk_270),
.dp_0_clk_vip_clk           			   		(clk_vid),
.dp_0_clk_16_clk                 		   		(clk_16),

.dp_0_bitec_dp_0_clk_cal_clk     		   	  				(clk_cal_50),
.dp_0_bitec_dp_0_tx_aux_tx_aux_in       			  			(dp_tx_aux_aux_in),
.dp_0_bitec_dp_0_tx_aux_tx_aux_out      			  			(dp_tx_aux_aux_out),
.dp_0_bitec_dp_0_tx_aux_tx_aux_oe       			  			(dp_tx_aux_aux_oe),  
.dp_0_bitec_dp_0_tx_aux_tx_hpd          			 			(tx_hpd),

.dp_0_bitec_dp_0_tx_analog_reconfig_tx_analog_reconfig_req   	(dp_tx_rcfg_req),  
.dp_0_bitec_dp_0_tx_analog_reconfig_tx_analog_reconfig_ack   	(1'b1),
.dp_0_bitec_dp_0_tx_analog_reconfig_tx_analog_reconfig_busy  	(dp_tx_rcfg_busy),
.dp_0_bitec_dp_0_tx_analog_reconfig_tx_vod 		  			(dp_tx_rcfg_vod),
.dp_0_bitec_dp_0_tx_analog_reconfig_tx_emp 		  			(dp_tx_rcfg_emp),
.dp_0_bitec_dp_0_tx_reconfig_tx_link_rate            			(),
.dp_0_bitec_dp_0_tx_reconfig_tx_link_rate_8bits 		  		(dp_tx_link_rate_8bits),                          
.dp_0_bitec_dp_0_tx_reconfig_tx_reconfig_req		  			(dp_txpll_rcfg_req),                         
.dp_0_bitec_dp_0_tx_reconfig_tx_reconfig_ack		  			(1'b1),                             
.dp_0_bitec_dp_0_tx_reconfig_tx_reconfig_busy 	 	  			(dp_tx_rcfg_busy), 
.dp_0_bitec_dp_0_tx_tx_parallel_data              		  		(tx_parallel_data),
.dp_0_bitec_dp_0_tx_tx_pll_powerdown							(), 
.dp_0_bitec_dp_0_tx_tx_analogreset								(),                                   
.dp_0_bitec_dp_0_tx_tx_digitalreset							(),   
.dp_0_bitec_dp_0_tx_tx_cal_busy								({4{tx_cal_busy}}),
.dp_0_bitec_dp_0_tx_tx_std_clkout           		 			(gxb_tx_clkout),
.dp_0_bitec_dp_0_tx_tx_pll_locked            		  			(tx_pll_locked),  
 
.dp_0_bitec_dp_0_tx0_video_in_1_clk      		  			(clk_vid),
.dp_0_bitec_dp_0_tx0_video_in_tx_vid_data     			  			(tpg_outd),
.dp_0_bitec_dp_0_tx0_video_in_tx_vid_v_sync    		 	 		(~tpg_v), 
.dp_0_bitec_dp_0_tx0_video_in_tx_vid_h_sync    		  			(~tpg_h),   
.dp_0_bitec_dp_0_tx0_video_in_tx_vid_de       			  			(tpg_de),

.dp_0_pio_0_external_connection_export   		(),

.dp_0_cvo_clocked_video_vid_clk        			(clk_vid),
.dp_0_cvo_clocked_video_vid_data      			(tpg_outd),
.dp_0_cvo_clocked_video_vid_datavalid  			(tpg_de),
.dp_0_cvo_clocked_video_vid_v_sync     			(tpg_v),
.dp_0_cvo_clocked_video_vid_h_sync     			(tpg_h),

.dp_0_fpll_0_mcgb_rst_mcgb_rst 			(tx_pll_mcgb_rst),        
.dp_0_fpll_0_pll_cal_busy_pll_cal_busy 	(tx_pll_cal_busy),                      
.dp_0_fpll_0_pll_locked_pll_locked 		(tx_pll_locked),                         
.dp_0_fpll_0_pll_refclk0_clk 				(clk_270),                                
.dp_0_fpll_0_reconfig_avmm0_write 			(tx_pll_reconfig_write),                          
.dp_0_fpll_0_reconfig_avmm0_read 			(tx_pll_reconfig_read),                            
.dp_0_fpll_0_reconfig_avmm0_address 		(tx_pll_reconfig_address),                     
.dp_0_fpll_0_reconfig_avmm0_writedata 		(tx_pll_reconfig_writedata),                      
.dp_0_fpll_0_reconfig_avmm0_readdata 		(tx_pll_reconfig_readdata),                      
.dp_0_fpll_0_reconfig_avmm0_waitrequest 	(tx_pll_reconfig_waitrequest),                
.dp_0_fpll_0_tx_serial_clk_clk 			(),                            

.dp_0_a10_xcvr_reconfig_avmm_ch0_write				(tx_gxb_reconfig_write),                        
.dp_0_a10_xcvr_reconfig_avmm_ch0_read				(tx_gxb_reconfig_read),                         
.dp_0_a10_xcvr_reconfig_avmm_ch0_address			(tx_gxb_reconfig_address),                      
.dp_0_a10_xcvr_reconfig_avmm_ch0_writedata			(tx_gxb_reconfig_writedata),                     
.dp_0_a10_xcvr_reconfig_avmm_ch0_readdata			(tx_gxb_reconfig_readdata), 
.dp_0_a10_xcvr_reconfig_avmm_ch0_waitrequest			(tx_gxb_reconfig_waitrequest),   
.dp_0_a10_xcvr_unused_tx_parallel_data_unused_tx_parallel_data (),
@@  for {set i 0} {$i<4} {incr i} { 
@@ set width_cnt_low [expr ${i}*40] 
@@ set width_cnt_up [expr (${i}+1)*40-1]     
.dp_0_a10_xcvr_tx_parallel_data_ch${i}_tx_parallel_data		(tx_parallel_data[${width_cnt_up}:${width_cnt_low}]),              
.dp_0_a10_xcvr_tx_clkout_ch${i}_clk							(gxb_tx_clkout[${i}]),  
.dp_0_a10_xcvr_tx_analogreset_ch${i}_tx_analogreset 			(tx_analogreset[${i}]),              
.dp_0_a10_xcvr_tx_analogreset_ack_ch${i}_tx_analogreset_ack 	(tx_analogreset_ack[${i}]),  
.dp_0_a10_xcvr_tx_cal_busy_ch${i}_tx_cal_busy 					(gxb_tx_cal_busy[${i}]),  
.dp_0_a10_xcvr_tx_coreclkin_ch${i}_clk 						(gxb_tx_coreclkin[${i}]),                                            
.dp_0_a10_xcvr_tx_digitalreset_ch${i}_tx_digitalreset 			(tx_digitalreset[${i}]),                        
.dp_0_a10_xcvr_tx_polinv_ch${i}_tx_polinv						(1'b0),                        
.dp_0_a10_xcvr_tx_serial_data_ch${i}_tx_serial_data 			(dp_tx_serial_out[${i}]),                    
@@}         
.dp_0_xcvr_ctrl_pll_locked_pll_locked 			(tx_pll_locked),                   
.dp_0_xcvr_ctrl_pll_select_pll_select			(1'b0),        
.dp_0_xcvr_ctrl_reset_reset 						(xcvr_ctrl_reset),           
.dp_0_xcvr_ctrl_tx_analogreset_tx_analogreset 	(tx_analogreset),                
.dp_0_xcvr_ctrl_tx_cal_busy_tx_cal_busy 			(res_tx_cal_busy),                    
.dp_0_xcvr_ctrl_tx_digitalreset_tx_digitalreset 	(tx_digitalreset),              
.dp_0_xcvr_ctrl_tx_ready_tx_ready 				(tx_ready),                           
@@}
@@if {$PCIE_ENABLE == 1} {  
.pcie_0_pcie_a10_hip_avmm_refclk_clk 			(pcie_refclk_100),
.pcie_0_coreclk_fanout_clk_clk					(coreclk_fanout_clk),                   
.pcie_0_coreclk_fanout_clk_reset_reset_n		(coreclk_fanout_reset_n), 
.pcie_0_pcie_a10_hip_avmm_hip_pipe_sim_pipe_pclk_in	(1'b0),    
@@if {$GEN_ENABLE == 3} {  
.pcie_0_pcie_a10_hip_avmm_hip_ctrl_test_in        	(32'h00000100),
@@} else {
.pcie_0_pcie_a10_hip_avmm_hip_ctrl_test_in        	(32'h0),
@@}
.pcie_0_pcie_a10_hip_avmm_hip_ctrl_simu_mode_pipe 	( 0 ),
@@  for {set j 0} {$j<4} {incr j} { 
.pcie_0_pcie_a10_hip_avmm_hip_pipe_phystatus${j}	(1'b0),  
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxdata${j}		(32'b0),  
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxdatak${j}		(4'b0),                                   
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxelecidle${j}	(1'b0),                             
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxstatus${j}		(3'b0),                             
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxvalid${j}		(1'b0),                                 
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxdataskip${j}	(1'b0),                                    
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxblkst${j}		(1'b0),                       
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxsynchd${j}		(2'b0),
.pcie_0_pcie_a10_hip_avmm_hip_serial_rx_in${j}       	(pcie_rx_serial_in[${j}]),                                
.pcie_0_pcie_a10_hip_avmm_hip_serial_tx_out${j}      	(pcie_tx_serial_out[${j}]), 
@@if {$PCIE_COUNT == 8} {
@@ set pcie_bit_cnt [expr ${j}+4]
.pcie_0_pcie_a10_hip_avmm_hip_pipe_phystatus${pcie_bit_cnt}		(1'b0),
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxdata${pcie_bit_cnt}		(32'b0),  
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxdatak${pcie_bit_cnt}		(4'b0),
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxelecidle${pcie_bit_cnt}	(1'b0),   
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxstatus${pcie_bit_cnt}		(3'b0),    
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxvalid${pcie_bit_cnt}		(1'b0),  
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxdataskip${pcie_bit_cnt}	(1'b0), 
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxblkst${pcie_bit_cnt}		(1'b0),     
.pcie_0_pcie_a10_hip_avmm_hip_pipe_rxsynchd${pcie_bit_cnt}		(2'b0),      
.pcie_0_pcie_a10_hip_avmm_hip_serial_rx_in${pcie_bit_cnt}    		(pcie_rx_serial_in[${pcie_bit_cnt}]),
.pcie_0_pcie_a10_hip_avmm_hip_serial_tx_out${pcie_bit_cnt}   		(pcie_tx_serial_out[${pcie_bit_cnt}]),
@@} 
@@}
.pcie_0_pcie_a10_hip_avmm_hip_pipe_sim_ltssmstate	(pcie_a10_hip_pipe_sim_ltssmstate),
.pcie_0_pcie_a10_hip_avmm_hip_status_ltssmstate		(pcie_a10_hip_status_ltssmstate),
.pcie_0_pcie_a10_hip_avmm_npor_npor					(pcie_npor_npor),
.pcie_0_pcie_a10_hip_avmm_npor_pin_perst			(pcie_a10_hip_npor_pin_perst),
@@}
@@if {$PARTIAL_RECONFIGURATION == 1} {
@@if {$FREEZE_ACK_DELAY_ENABLE == 1} {
.start_ack_pio_external_connection_export  			(start_ack_delay_cnt),
.stop_ack_pio_external_connection_export   			(stop_ack_delay_cnt), 
@@  for {set m 0} {$m<$PR_REGION_COUNT} {incr m} {
.frz_ctrl_${m}_pr_handshake_start_req	 		(pr_handshake_start_req_ack_loopback_wire_${m}),
.frz_ctrl_${m}_pr_handshake_start_ack	 		(pr_handshake_start_req_ack_loopback_wire_delay_ver_${m}), 
.frz_ctrl_${m}_pr_handshake_stop_req	    	(pr_handshake_stop_req_ack_loopback_wire_${m}),
.frz_ctrl_${m}_pr_handshake_stop_ack	    	(pr_handshake_stop_req_ack_loopback_wire_delay_ver_${m}),
.frz_bdg_${m}_freeze_conduit_freeze 					(freeze_wire_${m}),           
.frz_bdg_${m}_freeze_conduit_illegal_request  			(illegal_request_wire_${m}),  
.frz_ctrl_${m}_bridge_freeze0_freeze 					(freeze_wire_${m}),         
.frz_ctrl_${m}_bridge_freeze0_illegal_request 		    (illegal_request_wire_${m}),  
@@}
@@} else {
@@  for {set m 0} {$m<$PR_REGION_COUNT} {incr m} {
.frz_ctrl_${m}_pr_handshake_start_req	 		(pr_handshake_start_req_ack_loopback_wire_${m}),
.frz_ctrl_${m}_pr_handshake_start_ack	 		(pr_handshake_start_req_ack_loopback_wire_${m}), 
.frz_ctrl_${m}_pr_handshake_stop_req	 		(pr_handshake_stop_req_ack_loopback_wire_${m}),
.frz_ctrl_${m}_pr_handshake_stop_ack	 		(pr_handshake_stop_req_ack_loopback_wire_${m}),
@@}
@@}
@@}
@@if {$NIOSII_ENABLE == 0} {
.hps_fpga_reset_reset                          (hps_fpga_reset),
.issp_hps_resets_source                        (hps_reset_req),
.f2h_cold_reset_req_reset_n                    (~hps_cold_reset),
.f2h_warm_reset_req_reset_n                    (~hps_warm_reset),
.f2h_debug_reset_req_reset_n                   (~hps_debug_reset),
@@} else {
.emif_usr_reset_reset_n                          (emif_usr_reset_reset_n),
@@}
@@if {$TSE_ENABLE == 1} {  
@@if {$NIOSII_ENABLE == 1} {
.irq_bg_receiver_irq_irq                                (irq_bg_receiver_irq_irq),
@@} else {
.f2h_irq_irq                                      		(f2h_interrupt),
@@}
.ref_clk_125_clk                                  		(pcs_clk_125),
@@  for {set k 0} {$k<2} {incr k} {
.tse_${k}_eth_tse_0_mac_mdio_connection_mdc 			(mac${k}_fpga_mdc),
.tse_${k}_eth_tse_0_mac_mdio_connection_mdio_in 		(sgmii_${k}_mac_mdio_in),
.tse_${k}_eth_tse_0_mac_mdio_connection_mdio_out 		(sgmii_${k}_mac_mdio_out),
.tse_${k}_eth_tse_0_mac_mdio_connection_mdio_oen 		(sgmii_${k}_mac_mdio_oen),
.tse_${k}_eth_tse_0_mac_misc_connection_xon_gen 		(1'b0),
.tse_${k}_eth_tse_0_mac_misc_connection_xoff_gen 		(1'b0),
.tse_${k}_eth_tse_0_mac_misc_connection_magic_wakeup 	(),
.tse_${k}_eth_tse_0_mac_misc_connection_magic_sleep_n 	(1'b0),
.tse_${k}_eth_tse_0_mac_misc_connection_ff_tx_crc_fwd 	(1'b0),
.tse_${k}_eth_tse_0_mac_misc_connection_ff_tx_septy 	(),
.tse_${k}_eth_tse_0_mac_misc_connection_tx_ff_uflow 	(),
.tse_${k}_eth_tse_0_mac_misc_connection_ff_tx_a_full 	(),
.tse_${k}_eth_tse_0_mac_misc_connection_ff_tx_a_empty 	(),
.tse_${k}_eth_tse_0_mac_misc_connection_rx_err_stat 	(),
.tse_${k}_eth_tse_0_mac_misc_connection_rx_frm_type 	(),
.tse_${k}_eth_tse_0_mac_misc_connection_ff_rx_dsav 		(),
.tse_${k}_eth_tse_0_mac_misc_connection_ff_rx_a_full 	(),
.tse_${k}_eth_tse_0_mac_misc_connection_ff_rx_a_empty 	(),
.tse_${k}_eth_tse_0_rx_is_lockedtoref_rx_is_lockedtoref (),
.tse_${k}_eth_tse_0_rx_set_locktodata_rx_set_locktodata (1'b0),
.tse_${k}_eth_tse_0_rx_set_locktoref_rx_set_locktoref 	(1'b0),
.tse_${k}_eth_tse_0_serdes_control_connection_export 	(),
.tse_${k}_eth_tse_0_serial_connection_rxp 				(mac${k}_sgmii_rxp),
.tse_${k}_eth_tse_0_serial_connection_txp 				(mac${k}_sgmii_txp),
.tse_${k}_eth_tse_0_status_led_connection_crs 			(),
.tse_${k}_eth_tse_0_status_led_connection_link 			(),
.tse_${k}_eth_tse_0_status_led_connection_panel_link 	(),
.tse_${k}_eth_tse_0_status_led_connection_col 			(),
.tse_${k}_eth_tse_0_status_led_connection_an 			(),
.tse_${k}_eth_tse_0_status_led_connection_char_err 		(),
.tse_${k}_eth_tse_0_status_led_connection_disp_err 		(),
.tse_${k}_xcvr_reset_control_0_pll_select_pll_select 	(1'b0),
.tse_${k}_xcvr_reset_control_0_rx_ready_rx_ready  		(),
.tse_${k}_xcvr_reset_control_0_tx_ready_tx_ready  		(),
@@}
@@}
.reset_reset_n                                 (fpga_reset_n),
.clk_100_clk                                   (fpga_clk_100)
);  

@@if {$DISP_PORT_ENABLE == 1} {
bitec_reconfig_alt_a10 bitec_reconfig_alt_a10_i (
.clk                    	(fpga_clk_100),
.reset                  	(bitec_reconfig_reset),
.tx_analogreset_ack     	(&tx_analogreset_ack),

.rx_link_rate           	(8'd0),
.rx_link_rate_strobe    	(1'b0),
.rx_xcvr_busy           	(),

.tx_link_rate           	(dp_tx_link_rate_8bits),
.tx_vod                 	(dp_tx_rcfg_vod),
.tx_emp                 	(dp_tx_rcfg_emp),
.tx_link_rate_strobe    	(dp_txpll_rcfg_req),
.tx_vodemp_strobe       	(dp_tx_rcfg_req),
.tx_xcvr_busy           	(dp_tx_rcfg_busy),
.tx_xcvr_reset          	(tx_xcvr_reset),

.rx_analogreset_ack     	(1'b0),
.rx_mgmt_readdata       	(32'd0),
.rx_mgmt_waitrequest    	(1'b0), 

.tx_mgmt_chnum             	(tx_gxb_reconfig_address[11:10]),
.tx_mgmt_address          	(tx_gxb_reconfig_address[9:0]),
.tx_mgmt_writedata         	(tx_gxb_reconfig_writedata),
.tx_mgmt_readdata          	(tx_gxb_reconfig_readdata),
.tx_mgmt_write            	(tx_gxb_reconfig_write),
.tx_mgmt_read              	(tx_gxb_reconfig_read),
.tx_mgmt_waitrequest       	(tx_gxb_reconfig_waitrequest),

.txpll_mgmt_address       	(tx_pll_reconfig_address),
.txpll_mgmt_writedata     	(tx_pll_reconfig_writedata),
.txpll_mgmt_readdata      	(tx_pll_reconfig_readdata),
.txpll_mgmt_write         	(tx_pll_reconfig_write),
.txpll_mgmt_read          	(tx_pll_reconfig_read),
.txpll_mgmt_waitrequest   	(tx_pll_reconfig_waitrequest),  

.rx_xcvr_cal_busy          		(rx_cal_busy),
.tx_xcvr_cal_busy				(tx_xcvr_cal_busy),
.tx_pll_cal_busy				(tx_pll_cal_busy)
);

defparam  bitec_reconfig_alt_a10_i.RX_LANES = 0;
defparam  bitec_reconfig_alt_a10_i.TX_LANES = 4;
defparam  bitec_reconfig_alt_a10_i.TX_RATES_NUM = 3;
defparam  bitec_reconfig_alt_a10_i.RX_RATES_NUM = 0;


// Instantiate the AUX buffers
buslvds buslvds_i (
.doutp		(dp_tx_aux_aux_out),
.oe		(dp_tx_aux_aux_oe),
.din		(dp_tx_aux_aux_in),
.p		(dp_aux_ch_p),
.n		(dp_aux_ch_n)
);

@@}

@@if {$PARTIAL_RECONFIGURATION == 1 && $FREEZE_ACK_DELAY_ENABLE == 1} {
@@  for {set m 0} {$m<$PR_REGION_COUNT} {incr m} {
ack_delay_logic start_ack_delay_logic_${m}_inst (
.clk                                  (fpga_clk_100),
.reset                                (hps_fpga_reset), 
.delay_ack_pio                        (start_ack_delay_cnt),  
.ack_in                               (pr_handshake_start_req_ack_loopback_wire_${m}),
.ack_delay_out                        (pr_handshake_start_req_ack_loopback_wire_delay_ver_${m})
);

ack_delay_logic stop_ack_delay_logic_${m}_inst (
.clk                                  (fpga_clk_100),
.reset                                (hps_fpga_reset), 
.delay_ack_pio                        (stop_ack_delay_cnt),  
.ack_in                               (pr_handshake_stop_req_ack_loopback_wire_${m}),
.ack_delay_out                        (pr_handshake_stop_req_ack_loopback_wire_delay_ver_${m})
); 
@@}
@@}

// Debounce logic to clean out glitches within 1ms
debounce debounce_inst (
.clk                                  (fpga_clk_100),
@@if {$NIOSII_ENABLE == 1} {
.reset_n                              (emif_usr_reset_reset_n),   
@@} else {
.reset_n                              (~hps_fpga_reset), 
@@}  
.data_in                              (fpga_button_pio),
.data_out                             (fpga_debounced_buttons)
);
defparam debounce_inst.WIDTH = 4;
defparam debounce_inst.POLARITY = "LOW";
defparam debounce_inst.TIMEOUT = 100000;              // at 100Mhz this is a debounce time of 1ms
defparam debounce_inst.TIMEOUT_WIDTH = 32;            // ceil(log2(TIMEOUT))

@@if {$NIOSII_ENABLE == 0} {
altera_edge_detector pulse_cold_reset (
.clk       (fpga_clk_100),
.rst_n     (~hps_fpga_reset),
.signal_in (hps_reset_req[0]),
.pulse_out (hps_cold_reset)
);
defparam pulse_cold_reset.PULSE_EXT = 6;
defparam pulse_cold_reset.EDGE_TYPE = 1;
defparam pulse_cold_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_warm_reset (
.clk       (fpga_clk_100),
.rst_n     (~hps_fpga_reset),
.signal_in (hps_reset_req[1]),
.pulse_out (hps_warm_reset)
);
defparam pulse_warm_reset.PULSE_EXT = 2;
defparam pulse_warm_reset.EDGE_TYPE = 1;
defparam pulse_warm_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_debug_reset (
.clk       (fpga_clk_100),
.rst_n     (~hps_fpga_reset),
.signal_in (hps_reset_req[2]),
.pulse_out (hps_debug_reset)
);
defparam pulse_debug_reset.PULSE_EXT = 32;
defparam pulse_debug_reset.EDGE_TYPE = 1;
defparam pulse_debug_reset.IGNORE_RST_WHILE_BUSY = 1;
@@}

endmodule
